[build-system]
requires = ["hatchling>=1.24.2"]
build-backend = "hatchling.build"

[project]
name = "afs_fastapi"
version = "0.1.5"
description = "Automated Farming System API (FastAPI)."
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
authors = [
  { name = "D Deryl Downey", email = "dderyl@cyberspacetechgroup.com" } # optional
]
keywords = ["fastapi", "automation", "agriculture", "ml", "robotics"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Framework :: FastAPI",
  "License :: OSI Approved :: MIT License",
  "Typing :: Typed",
]

# Runtime deps (kept lean; dev/test go under optional-dependencies)
dependencies = [
  "fastapi>=0.111",          # FastAPI (Pydantic v2)
  "uvicorn[standard]>=0.30", # ASGI server
  "starlette>=0.46",         # FastAPIâ€™s ASGI toolkit
  "pydantic>=2.7",           # Models/validation
  "python-can",              # CAN bus communication
  "httpx",                   # HTTP client for CRDT communication
  "tenacity",                # Retry mechanism for reliable messaging
  "pybreaker",               # Circuit breaker for network resilience
  # add any concrete libs you use at runtime (DB client, sensors, etc.)
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0",
  "pytest-asyncio>=0.23",
  "httpx>=0.27",
  "mypy>=1.10",
  "ruff>=0.5",
  "black>=24.0",
  "markdown-it-py>=3.0",      # Tier 1: CommonMark-compliant markdown parser
  "mdit-py-plugins>=0.4",     # GFM extensions for markdown-it-py
  "markdown2>=2.4",           # Tier 2: Fallback markdown parser with extras
  "markdown>=3.5",            # Tier 3: Python-Markdown final fallback
  "types-setuptools",         # example type stubs; trim as needed
  "types-Markdown",           # stubs for docs/convert_readme_to_index_html.py
]

[project.scripts]
afs-api = "afs_fastapi.__main__:main"

[project.urls]
Homepage = "https://github.com/dderyldowney/afs_fastapi"
Issues = "https://github.com/dderyldowney/afs_fastapi/issues"

# ---------------------------
# Tooling: make everything 3.12
# ---------------------------

[tool.ruff]
# Ruff will infer from [project].requires-python, but we pin explicitly for clarity.
target-version = "py312"
line-length = 100
# Enable Ruff lints that complement mypy/pyright without being noisy.
lint.select = ["E", "F", "UP", "B"]
lint.ignore = [
  "E501",  # line length handled by formatter
]
src = ["afs_fastapi", "tests"]
exclude = ["bin", "afs_fastapi/__main__.py"]
lint.per-file-ignores = {"tests/core/test_todos_manager.py" = ["E402"]}

[tool.black]
line-length = 100
target-version = ["py312"]
include = "\\.pyi?$"
exclude = '''
(/ 
    \.git
  | \.venv
  | \.claude
  | __pycache__
  | build
  | dist
  | bin
)/ 
'''

[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
disallow_untyped_defs = true
warn_return_any = true
no_implicit_optional = true
show_error_codes = true
pretty = true
# If you vendor optional libs, ignore their imports to keep signal clean:
# ignore_missing_imports = true
mypy_path = ["afs_fastapi"]
exclude = ["afs_fastapi/__main__.py"]

[tool.pyright]
# Pyright can live in pyproject; this keeps VS Code/Pylance aligned.
typeCheckingMode = "strict"
pythonVersion = "3.12"
# Point to your venv so editors pick it up automatically (works well with .venv pattern)
virtualenvPath = "."
virtualenv = ".venv"
reportMissingTypeStubs = "warning"
reportUnknownMemberType = "warning"
stubPath = "typings"

[tool.coverage.run]
branch = true
source = ["afs_fastapi"]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.isort]
# Use Black-compatible profile so isort doesn't conflict with Black's import formatting
profile = "black"
line_length = 100
known_first_party = ["afs_fastapi"]
src_paths = ["afs_fastapi", "tests"]
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
