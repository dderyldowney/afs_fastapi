feat: Implement TodoWrite task management system and populate initial static analysis fixes

This commit introduces a comprehensive task management system based on the TodoWrite.md specification, integrated into the project to streamline the process of addressing static analysis errors.

Key changes include:
- **New Scripts for TodoWrite Management:**
  - `bin/parse_ruff_output.py`: A Python script to parse `ruff` static analysis output, enabling precise identification and categorization of errors.
  - `bin/subtask-add`: A new script to add subtasks to active tasks, facilitating granular task breakdown.
  - `bin/task-activate`: A new script to activate specific tasks, ensuring proper workflow progression.

- **Enhancements to Existing TodoWrite Scripts:**
  - `bin/step-add`: Modified to correctly add steps to the active phase, resolving previous import and function call issues.
  - `bin/task-add`: Updated to accurately add tasks to the active step, fixing import errors and argument handling.
  - `bin/step-activate`: Corrected to properly activate steps, addressing `KeyError` by using the correct `title` attribute.

- **Core TodoWrite Manager Updates (`afs_fastapi/core/todos_manager.py`):**
  - Implemented `activate_step` function: Enables activation of a specific step, managing the status of other steps, parent phases, and goals.
  - Implemented `activate_task` function: Allows activation of a specific task, managing the status of other tasks, parent steps, phases, and goals.

- **Initial Static Analysis Plan Population:**
  - Populated `ToDoWrite.md` with a strategic goal: "System Maintenance: Locate and repair system errors."
  - Created six distinct phases under this goal: "Docstrings and Comments", "Code Style and Formatting", "Typing and Annotations", "Testing Frameworks", "Security and Subprocess", and "General Refactoring".
  - Identified and added numerous files as "steps" within each phase, based on the `ruff` static analysis report.
  - Added the first task for `bin/__init__.py` under the "Docstrings and Comments" phase: "Add missing docstring to bin/__init__.py".

These changes lay the groundwork for a structured and efficient approach to resolving the identified 5599 static analysis errors, ensuring improved code quality and maintainability.