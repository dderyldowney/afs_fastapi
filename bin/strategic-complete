#!/usr/bin/env python3
# type: ignore

import argparse
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.core.todos_manager import load_todos, save_todos, complete_goal  # noqa: E402


def main():
    parser = argparse.ArgumentParser(description="Mark a strategic goal as complete.")
    parser.add_argument("search_term", type=str, help="The ID or description of the strategic goal to complete.")
    args = parser.parse_args()

    todos = load_todos()
    goals = todos["goals"]
    matched_goal = None
    for goal in goals:
        if goal['id'] == args.search_term or args.search_term.lower() in goal['title'].lower():
            matched_goal = goal
            break
    
    if not matched_goal:
        print(f"Error: No goal found matching \"{args.search_term}\"")
        print("Use 'get_goals()' to see available goals.")
        sys.exit(1)

    if matched_goal['status'] == 'done':
        print(f"Goal already completed: {matched_goal['title']}")
        sys.exit(0)

    # Use complete_goal function for enhanced functionality
    completed_goal, error = complete_goal(matched_goal['id'])

    if error:
        print(f"Error: {error}")
        sys.exit(1)

    print("âœ“ Goal marked as completed!")
    print(f"  ID: {completed_goal['id']}")
    print(f"  Title: {completed_goal['title']}")
    print(f"  Status: {completed_goal['status']}")
    if 'date_completed' in completed_goal:
        print(f"  Date completed: {completed_goal['date_completed']}")
    print("  Enhanced: Validation log updated")


if __name__ == "__main__":
    main()