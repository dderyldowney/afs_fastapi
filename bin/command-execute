#!/usr/bin/env python3
# type: ignore

import argparse
import subprocess
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from todowrite.app import ToDoWrite  # noqa: E402
from todowrite.db.models import Node  # noqa: E402


def main():
    # Initialize ToDoWrite app instance
    app = ToDoWrite()
    parser = argparse.ArgumentParser(description="Execute a Command from the ToDoWrite system.")
    parser.add_argument("command_id", type=str, help="The ID of the command to execute.")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be executed without running.")
    parser.add_argument("--auto-complete", action="store_true", help="Mark command as complete after successful execution.")
    args = parser.parse_args()

    # Find the command
    todos = app.load_todos()
    commands = todos.get("Command", [])
    command = None
    for c in commands:
        if c.id == args.command_id:
            command = c
            break

    if not command:
        print(f"Error: Command with ID '{args.command_id}' not found.")
        sys.exit(1)

    if not command.command or not command.command.run:
        print(f"Error: Command '{args.command_id}' has no executable shell command.")
        sys.exit(1)

    shell_command = command.command.run.get("shell", "")
    if not shell_command:
        print(f"Error: Command '{args.command_id}' has empty shell command.")
        sys.exit(1)

    print(f"⚡ Executing Command: {command.id}")
    print(f"Title: {command.title}")
    print(f"Description: {command.description}")
    print(f"Shell Command: {shell_command}")
    print(f"AC Reference: {command.command.ac_ref}")
    print("=" * 50)

    if args.dry_run:
        print("DRY RUN: Command would be executed but --dry-run flag is set.")
        return

    try:
        # Execute the command
        result = subprocess.run(
            shell_command,
            shell=True,
            capture_output=True,
            text=True,
            cwd=str(project_root)
        )

        print(f"Exit Code: {result.returncode}")
        if result.stdout:
            print("STDOUT:")
            print(result.stdout)
        if result.stderr:
            print("STDERR:")
            print(result.stderr)

        if result.returncode == 0:
            print("✓ Command executed successfully!")
            
            if args.auto_complete:
                completed_command, error = app.complete_command(args.command_id)
                if error:
                    print(f"Warning: Failed to mark command as complete: {error}")
                else:
                    print(f"✓ Command marked as completed automatically.")
        else:
            print(f"✗ Command failed with exit code {result.returncode}")
            sys.exit(result.returncode)

    except Exception as e:
        print(f"Error executing command: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
