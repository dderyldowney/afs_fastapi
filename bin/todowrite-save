#!/usr/bin/env python3
# type: ignore
"""TodoWrite Quick Save Command.

Provides "as few steps as possible" saving of TodoWrite tasks to the
4-level AFS FastAPI hierarchy: Strategic Goal ‚Üí Phase ‚Üí Step ‚Üí Task.

Usage:
    ./bin/todowrite-save --quick "Task 1" "Task 2" "Task 3"
    ./bin/todowrite-save --context "CAN Bus Testing" --quick "Debug timeouts" "Fix async issues"
    ./bin/todowrite-save --level step --json '[{"content":"Task","status":"completed"}]'
    ./bin/todowrite-save --show-context
"""

import argparse
import json
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.core.todowrite_integration import (  # noqa: E402
    get_save_context,
    quick_save_tasks,
    save_todowrite_tasks,
)


def main():
    parser = argparse.ArgumentParser(
        description="Save TodoWrite tasks with minimal steps to AFS FastAPI hierarchy",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Quick save simple tasks
  ./bin/todowrite-save --quick "Implement timeout fix" "Test CAN interface" "Update docs"

  # Save with agricultural context
  ./bin/todowrite-save --context "Fleet Coordination" --quick "Add collision detection" "Test emergency stop"

  # Save with explicit level targeting
  ./bin/todowrite-save --level step --quick "Fix async timeout"

  # Save complex TodoWrite data
  ./bin/todowrite-save --json '[{"content":"Debug CAN timeouts","status":"completed"}]'

  # Show current context
  ./bin/todowrite-save --show-context
        """,
    )

    # Main action arguments
    parser.add_argument("--quick", "-q", nargs="+", help="Quick save task descriptions as strings")

    parser.add_argument(
        "--json", "-j", type=str, help="Save TodoWrite tasks as JSON (with content, status, etc.)"
    )

    parser.add_argument(
        "--show-context",
        "-s",
        action="store_true",
        help="Show current agricultural context and available save levels",
    )

    # Modifier arguments
    parser.add_argument(
        "--context",
        "-c",
        type=str,
        help="Agricultural robotics context (e.g., 'CAN Bus Testing', 'Fleet Coordination')",
    )

    parser.add_argument(
        "--level",
        "-l",
        choices=["auto", "step", "phase"],
        default="auto",
        help="Target hierarchy level (default: auto-detect)",
    )

    args = parser.parse_args()

    # Show context action
    if args.show_context:
        context = get_save_context()
        print("üöú AFS FastAPI TodoWrite Context")
        print("=" * 40)

        if context["active_phase"]:
            print(f"üìä Active Phase: {context['active_phase']}")
        else:
            print("üìä Active Phase: None")

        if context["active_step"]:
            print(f"‚ö° Active Step: {context['active_step']}")
        else:
            print("‚ö° Active Step: None")

        print(f"üéØ Available Levels: {', '.join(context['available_levels'])}")
        print()
        print("üåæ Suggested Agricultural Contexts:")
        for ctx in context["suggested_agricultural_contexts"]:
            print(f"  ‚Ä¢ {ctx}")
        return

    # Quick save action
    if args.quick:
        result, error = quick_save_tasks(args.quick, args.context)
        if error:
            print(f"‚ùå Error: {error}", file=sys.stderr)
            sys.exit(1)
        print(f"‚úÖ {result}")
        return

    # JSON save action
    if args.json:
        try:
            todowrite_data = json.loads(args.json)
            if not isinstance(todowrite_data, list):
                todowrite_data = [todowrite_data]

            result, error = save_todowrite_tasks(todowrite_data, args.context)
            if error:
                print(f"‚ùå Error: {error}", file=sys.stderr)
                sys.exit(1)
            print(f"‚úÖ {result}")
            return
        except json.JSONDecodeError as e:
            print(f"‚ùå Invalid JSON: {e}", file=sys.stderr)
            sys.exit(1)

    # No action specified
    print("‚ùå No action specified. Use --quick, --json, or --show-context", file=sys.stderr)
    parser.print_help()
    sys.exit(1)


if __name__ == "__main__":
    main()
