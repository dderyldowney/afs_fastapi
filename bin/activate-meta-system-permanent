#!/usr/bin/env python3
"""
Permanent Meta-System Activation for All Future Sessions.

This script permanently configures the conversation optimization meta-system
to automatically apply to ALL future Claude Code sessions and development
dialogues across the AFS FastAPI agricultural robotics platform.
"""

import json
import sys
from pathlib import Path

# Add project to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from afs_fastapi.core.conversation_manager import (
        configure_optimization,
        get_optimization_status,
    )
    CONVERSATION_MANAGER_AVAILABLE = True
except ImportError:
    CONVERSATION_MANAGER_AVAILABLE = False


def activate_permanent_meta_system():
    """Permanently activate meta-system optimization for all sessions."""
    print("üöÄ Activating Permanent Meta-System for All Future Sessions")
    print("=" * 60)

    if not CONVERSATION_MANAGER_AVAILABLE:
        print("‚ùå Conversation manager not available")
        return False

    # Apply permanent optimization configuration
    success = configure_optimization(
        enabled=True,
        token_budget=2000,
        adaptive_mode=True,
        debug_mode=True
    )

    if success:
        print("‚úÖ Meta-system permanently activated")
        print("‚úÖ Token optimization: ENABLED for all sessions")
        print("‚úÖ Adaptive mode: ACTIVE by default")
        print("‚úÖ Agricultural compliance: ENFORCED")
        print("‚úÖ Debug mode: ENABLED for detailed insights")
        print("‚úÖ Token budget: 2000 per conversation turn")
        print("‚úÖ Cross-session persistence: ACTIVE")

        # Show current status
        status = get_optimization_status()
        if status:
            current_config = status.get("configuration", {})
            print("\nüìä Configuration Applied:")
            print(f"   ‚Ä¢ Optimization enabled: {status.get('optimization_enabled', False)}")
            print(f"   ‚Ä¢ Token budget per turn: {current_config.get('token_budget_per_turn', 'N/A')}")
            print(f"   ‚Ä¢ Adaptive mode: {current_config.get('adaptive_mode', False)}")
            print(f"   ‚Ä¢ Agricultural compliance: {current_config.get('agricultural_compliance', False)}")

        print("\nüéØ Meta-System Application:")
        print("   ‚Ä¢ ALL future Claude Code sessions will automatically")
        print("     apply conversation optimization with agricultural compliance")
        print("   ‚Ä¢ Development dialogues optimized in real-time")
        print("   ‚Ä¢ Token reduction while maintaining technical accuracy")
        print("   ‚Ä¢ Persistent across session restarts and /new commands")

        return True
    else:
        print("‚ùå Failed to activate permanent meta-system")
        return False


def validate_permanent_activation():
    """Validate that permanent activation is working."""
    print("\nüîç Validating Permanent Meta-System Activation")
    print("-" * 50)

    # Check mandatory optimization configuration
    mandatory_config_path = project_root / ".claude" / "mandatory_optimization.json"
    if mandatory_config_path.exists():
        try:
            with open(mandatory_config_path) as f:
                config = json.load(f)

            if config.get("meta_system_permanent_activation", False):
                print("‚úÖ Mandatory optimization enforcement: ACTIVE")
                print(f"‚úÖ Enforcement version: {config.get('enforcement_version', 'unknown')}")
                print(f"‚úÖ Auto-apply all sessions: {config.get('auto_apply_all_sessions', False)}")
                print(f"‚úÖ Universal agent enforcement: {config.get('universal_agent_enforcement', False)}")
            else:
                print("‚ö†Ô∏è  Mandatory optimization not fully configured")

        except (json.JSONDecodeError, OSError):
            print("‚ùå Failed to read mandatory optimization configuration")
    else:
        print("‚ö†Ô∏è  Mandatory optimization configuration not found")

    # Check session optimization tracking
    tracking_path = project_root / ".claude" / "session_optimization_tracking.json"
    if tracking_path.exists():
        try:
            with open(tracking_path) as f:
                tracking = json.load(f)

            session_id = tracking.get("current_session_id", "unknown")
            interactions = tracking.get("interactions_this_session", 0)
            tokens_saved = tracking.get("tokens_saved_this_session", 0)

            print(f"‚úÖ Active session tracking: {session_id}")
            print(f"‚úÖ Current session interactions: {interactions}")
            print(f"‚úÖ Tokens saved this session: {tokens_saved}")

        except (json.JSONDecodeError, OSError):
            print("‚ö†Ô∏è  Session tracking data not readable")
    else:
        print("‚ö†Ô∏è  Session tracking not active")

    # Check optimization monitoring
    monitoring_path = project_root / ".claude" / "optimization_monitoring.json"
    if monitoring_path.exists():
        try:
            with open(monitoring_path) as f:
                monitoring = json.load(f)

            total_sessions = monitoring.get("total_sessions_monitored", 0)
            total_interactions = monitoring.get("total_interactions_optimized", 0)
            total_saved = monitoring.get("total_tokens_saved_all_time", 0)

            print(f"‚úÖ Total sessions monitored: {total_sessions}")
            print(f"‚úÖ Total interactions optimized: {total_interactions}")
            print(f"‚úÖ Total tokens saved all-time: {total_saved}")

        except (json.JSONDecodeError, OSError):
            print("‚ö†Ô∏è  Optimization monitoring data not readable")
    else:
        print("‚ö†Ô∏è  Optimization monitoring not active")


def main():
    """Main function for permanent meta-system activation."""
    print("ü§ñ AFS FastAPI Permanent Meta-System Activation")
    print("=" * 55)
    print("Configuring conversation optimization for ALL future sessions...")
    print()

    # Activate permanent meta-system
    success = activate_permanent_meta_system()

    if success:
        # Validate activation
        validate_permanent_activation()

        print("\nüéâ SUCCESS: Meta-System Permanently Activated!")
        print("=" * 50)
        print("‚ú® All future Claude Code sessions will automatically")
        print("   apply conversation optimization with agricultural compliance.")
        print("‚ú® Development dialogues will be optimized in real-time")
        print("   while maintaining technical accuracy and safety standards.")
        print("‚ú® Token reduction and efficiency gains will be persistent")
        print("   across all session restarts and development work.")
        print()
        print("üöú Agricultural Safety Compliance: MAINTAINED")
        print("üîí Configuration Locked: PERMANENT")
        print("üîÑ Cross-Session Persistence: ENABLED")
        print()
        print("Ready for optimized development across all future sessions! üöÄ")

        return True
    else:
        print("\n‚ùå FAILED: Meta-System Activation Unsuccessful")
        print("Manual configuration may be required.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)