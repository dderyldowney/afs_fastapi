#!/bin/bash

# strategic-list: Display all strategic TODO items for agricultural robotics platform
# Usage: ./bin/strategic-list [--pending|--completed|--all]

set -euo pipefail

# Ensure we're in the project root
if [[ ! -f ".claude/DUAL_TODO_SYSTEM.md" ]]; then
    echo "Error: Must be run from AFS FastAPI project root directory"
    exit 1
fi

STRATEGIC_FILE=".claude/strategic_todos.json"
FILTER="${1:-all}"

# Create strategic todos file if it doesn't exist
if [[ ! -f "$STRATEGIC_FILE" ]]; then
    echo "No strategic TODOs found. Use './bin/strategic-add' to create strategic objectives."
    exit 0
fi

# Validate filter argument
case "$FILTER" in
    --pending|--completed|--all|pending|completed|all)
        ;;
    *)
        echo "Usage: $0 [--pending|--completed|--all]"
        exit 1
        ;;
esac

# Remove leading dashes from filter
FILTER=${FILTER#--}

echo "=== AFS FastAPI Strategic TODOs ==="
echo ""

# Use Python to display strategic TODOs with formatting
python3 -c "
import json
import sys
from datetime import datetime, timezone

# Read strategic todos
with open('$STRATEGIC_FILE', 'r') as f:
    data = json.load(f)

todos = data.get('todos', [])
metadata = data.get('metadata', {})
filter_type = '$FILTER'

# Filter todos based on status
if filter_type == 'pending':
    filtered_todos = [t for t in todos if t['status'] == 'pending']
elif filter_type == 'completed':
    filtered_todos = [t for t in todos if t['status'] == 'completed']
else:
    filtered_todos = todos

if not filtered_todos:
    if filter_type == 'pending':
        print('No pending strategic TODOs found.')
    elif filter_type == 'completed':
        print('No completed strategic TODOs found.')
    else:
        print('No strategic TODOs found.')
    sys.exit(0)

# Sort by status (pending first), then by priority (high first), then by creation date
priority_order = {'high': 0, 'medium': 1, 'low': 2}
status_order = {'pending': 0, 'in_progress': 1, 'completed': 2}

filtered_todos.sort(key=lambda x: (
    status_order.get(x['status'], 999),
    priority_order.get(x['priority'], 999),
    x['created_at']
))

# Display todos with formatting
for i, todo in enumerate(filtered_todos, 1):
    status_icon = {
        'pending': '○',
        'in_progress': '◐',
        'completed': '●'
    }.get(todo['status'], '?')

    priority_marker = {
        'high': '[HIGH]',
        'medium': '[MED] ',
        'low': '[LOW] '
    }.get(todo['priority'], '[???]')

    print(f'{i:2d}. {status_icon} {priority_marker} {todo[\"content\"]}')
    print(f'     ID: {todo[\"id\"]} | Category: {todo.get(\"category\", \"general\")}')

    # Show completion date if completed
    if todo['status'] == 'completed' and 'completed_at' in todo:
        completed_date = todo['completed_at'][:10]  # YYYY-MM-DD
        print(f'     Completed: {completed_date}')

    print()

# Display summary
print('=== Summary ===')
print(f'Total Strategic TODOs: {metadata.get(\"total_strategic_todos\", len(todos))}')
print(f'Pending: {metadata.get(\"pending_count\", 0)} | Completed: {metadata.get(\"completed_count\", 0)}')
print(f'Last Updated: {metadata.get(\"last_updated\", \"Unknown\")}')
"

echo ""
echo "Use './bin/strategic-add \"Description\"' to add new strategic objectives."
echo "Use './bin/strategic-complete \"Objective\"' to mark objectives as completed."
# Auto-sync TODO state for session persistence
./bin/todo-sync --silent 2>/dev/null || true
