#!/usr/bin/env python3
# type: ignore

import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from todowrite.manager import get_goals  # noqa: E402


def get_priority_emoji(priority):
    if priority == "high":
        return "üî•"
    elif priority == "medium":
        return "üí°"
    elif priority == "low":
        return "üå±"
    return "‚ö™Ô∏è"


def get_status_emoji(status):
    if status == "done":
        return "‚úÖ"
    elif status == "in_progress":
        return "‚óå"
    elif status == "planned":
        return "‚ö™Ô∏è"
    elif status == "blocked":
        return "‚è∏Ô∏è"
    elif status == "rejected":
        return "‚ùå"
    return "?"


def display_strategic_todos():
    goals = get_goals()

    if not goals:
        print("No strategic goals found.")
        return

    print("=== AFS FastAPI Strategic Goals ===")
    print()

    pending_goals = [g for g in goals if g.get("status") not in ["done", "rejected"]]
    completed_goals = [g for g in goals if g.get("status") == "done"]

    for i, goal in enumerate(pending_goals, 1):
        priority_emoji = get_priority_emoji(goal.get("priority", "medium"))
        status_emoji = get_status_emoji(goal.get("status", "planned"))
        print(f"{i:2d}. {status_emoji} [{priority_emoji}] {goal.get('title', 'No title')}")
        print(f"     ID: {goal.get('id')} | Category: {goal.get('category', 'general')}")
        print()

    if completed_goals:
        print("-" * 20)
        print("Completed Goals:")
        for _i, goal in enumerate(completed_goals, 1):
            status_emoji = get_status_emoji(goal.get("status", "done"))
            print(f"{status_emoji} {goal.get('title', 'No title')} - COMPLETE")
            print(
                f"  ID: {goal.get('id')} | Category: {goal.get('category', 'general')}"
            )  # Removed date_completed as it's not in new schema
            print()

    print("=== Summary ===")
    print(f"Total Strategic Goals: {len(goals)}")
    print(f"Pending: {len(pending_goals)} | Completed: {len(completed_goals)}")
    print()
    print(
        'Use \'add_goal("Title", "Description", category="category", priority="priority")\' to add new strategic goals.'
    )
    print(
        "Use 'complete_goal(\"goal_id\")' to mark goals as completed. (Function not yet implemented)"
    )  # Placeholder for future implementation


if __name__ == "__main__":
    display_strategic_todos()
