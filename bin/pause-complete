#!/usr/bin/env python3
"""
Pause Point Completion Tool - convenience wrapper for pause-status complete.

Follows the same pattern as goal-complete, phase-complete, etc.
Marks pause points or checkpoints as completed.
"""

from __future__ import annotations

import argparse
import sys
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Add bin directory to sys.path for common modules
bin_path = project_root / "bin"
if bin_path.exists():
    sys.path.insert(0, str(bin_path))

from common.json_operations import load_json, save_json


def mark_point_completed(point_id: str) -> bool:
    """Mark a pause point or checkpoint as completed."""
    pause_points_file = project_root / ".claude" / "pause_points.json"
    checkpoints_file = project_root / ".claude" / "checkpoints.json"

    # Try pause points first
    pause_points = load_json(pause_points_file, default=[])
    for point in pause_points:
        if point["id"] == point_id:
            old_status = point.get("status", "no status")
            point["status"] = "completed"
            if save_json(pause_points_file, pause_points):
                print(f"✅ Pause point {point_id} marked as completed!")
                print(f"   Status: {old_status} → completed")
                print(f"   Reason: {point['reason']}")
                print()
                print("Use './bin/pause-status list' to view all pause point statuses.")
                return True
            else:
                print(f"❌ Failed to save pause points file")
                return False

    # Try checkpoints
    checkpoints = load_json(checkpoints_file, default=[])
    for point in checkpoints:
        if point["id"] == point_id:
            old_status = point.get("status", "no status")
            point["status"] = "completed"
            if save_json(checkpoints_file, checkpoints):
                print(f"✅ Checkpoint {point_id} marked as completed!")
                print(f"   Status: {old_status} → completed")
                print(f"   Description: {point['description']}")
                print()
                print("Use './bin/pause-status list' to view all checkpoint statuses.")
                return True
            else:
                print(f"❌ Failed to save checkpoints file")
                return False

    print(f"❌ Pause point or checkpoint '{point_id}' not found")
    return False


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Mark a pause point or checkpoint as completed in the AFS FastAPI system."
    )
    parser.add_argument("point_id", type=str, help="The ID of the pause point or checkpoint to complete.")
    args = parser.parse_args()

    success = mark_point_completed(args.point_id)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()