#!/usr/bin/env bash
# updatedocs - Regenerate all 6 core documentation files for AFS FastAPI
#
# This meta-command orchestrates regeneration of the complete documentation suite
# ensuring synchronized platform state across strategic assessments, web presence,
# version history, and compliance documentation for agricultural robotics platform.
#
# Usage:
#   ./bin/updatedocs                    # Update all 6 core documents
#   ./bin/updatedocs --help             # Show usage information
#   ./bin/updatedocs --dry-run          # Show what would be updated
#   ./bin/updatedocs --only=doc1,doc2   # Update specific documents only
#   ./bin/updatedocs --root=PATH        # Set custom project root (test mode)
#
# Agricultural Context:
# Unified documentation updates essential for ISO compliance auditing (ISO 11783,
# ISO 18497), stakeholder communication for farm equipment procurement, and
# maintaining synchronized platform state for autonomous tractor fleet management.
#
# 6 Core Documents:
#   1. WHERE_WE_ARE.md - Strategic assessment with current platform metrics
#   2. docs/index.html - Web documentation from README.md
#   3. CHANGELOG.md - Version history from git commits
#   4. Test reports - Platform health validation results
#   5. Session state - Current development session metrics
#   6. Documentation metrics - Combined status dashboard

set -euo pipefail

# Color codes for output
readonly BLUE='\033[0;34m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="${PROJECT_ROOT:-.}"
DRY_RUN=false
SELECTIVE=""
CUSTOM_ROOT=""

# Document update tracking
UPDATED_DOCS=0
FAILED_DOCS=0

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            echo "updatedocs - Regenerate all 6 core documentation files"
            echo ""
            echo "Usage:"
            echo "  ./bin/updatedocs                    Update all 6 core documents"
            echo "  ./bin/updatedocs --help             Show this help message"
            echo "  ./bin/updatedocs --dry-run          Show what would be updated"
            echo "  ./bin/updatedocs --only=doc1,doc2   Update specific documents"
            echo "  ./bin/updatedocs --root=PATH        Set custom project root (test)"
            echo ""
            echo "6 Core Documents Updated:"
            echo "  • WHERE_WE_ARE.md     - Strategic assessment (whereweare --generate)"
            echo "  • docs/index.html     - Web documentation (updatewebdocs)"
            echo "  • CHANGELOG.md        - Version history (updatechangelog)"
            echo "  • Test reports        - Platform health validation"
            echo "  • Session state       - Development session metrics"
            echo "  • Documentation stats - Combined status dashboard"
            echo ""
            echo "Agricultural Context:"
            echo "  Unified documentation updates ensure ISO compliance (ISO 11783, ISO 18497)"
            echo "  for farm equipment auditing, stakeholder communication, and autonomous"
            echo "  tractor fleet management. Synchronized docs critical for safety-critical"
            echo "  multi-tractor coordination systems and regulatory compliance."
            echo ""
            echo "Selective Update:"
            echo "  --only=whereweare    Update only strategic assessment"
            echo "  --only=webdocs       Update only web documentation"
            echo "  --only=changelog     Update only version history"
            echo "  --only=whereweare,webdocs,changelog   Update multiple specific docs"
            exit 0
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --only=*)
            SELECTIVE="${1#*=}"
            shift
            ;;
        --root=*)
            CUSTOM_ROOT="${1#*=}"
            shift
            ;;
        *)
            echo -e "${RED}Error: Unknown option $1${NC}" >&2
            echo "Use --help for usage information" >&2
            exit 1
            ;;
    esac
done

# Set project root for test mode
if [[ -n "$CUSTOM_ROOT" ]]; then
    PROJECT_ROOT="$CUSTOM_ROOT"
fi

# Header
echo -e "${BLUE}📚 AFS FastAPI Documentation Update Suite${NC}"
echo -e "${BLUE}==========================================${NC}"
echo ""

if [[ "$DRY_RUN" == "true" ]]; then
    echo -e "${YELLOW}🔍 DRY RUN MODE - Showing what would be updated${NC}"
    echo ""
fi

# Helper function to check if document should be updated
should_update() {
    local doc_name=$1
    if [[ -z "$SELECTIVE" ]]; then
        return 0  # Update all if no selection
    fi
    if [[ ",$SELECTIVE," == *",$doc_name,"* ]]; then
        return 0  # Update if in selection
    fi
    return 1  # Skip otherwise
}

# Helper function to run update command
run_update() {
    local doc_name=$1
    local doc_description=$2
    local update_command=$3

    if ! should_update "$doc_name"; then
        echo -e "${CYAN}⊘  Skipping: $doc_description${NC}"
        return 0
    fi

    echo -e "${CYAN}📝 Updating: $doc_description${NC}"

    if [[ "$DRY_RUN" == "true" ]]; then
        echo -e "${YELLOW}   Would run: $update_command${NC}"
        ((UPDATED_DOCS++))
        return 0
    fi

    # Execute update command
    if eval "$update_command" > /dev/null 2>&1; then
        echo -e "${GREEN}   ✅ Success: $doc_description updated${NC}"
        ((UPDATED_DOCS++))
        return 0
    else
        echo -e "${RED}   ❌ Failed: $doc_description update failed${NC}"
        ((FAILED_DOCS++))
        return 1
    fi
}

# Document 1: WHERE_WE_ARE.md - Strategic Assessment
run_update "whereweare" \
    "WHERE_WE_ARE.md (Strategic Assessment)" \
    "./bin/whereweare --generate 2>&1"

echo ""

# Document 2: docs/index.html - Web Documentation
run_update "webdocs" \
    "docs/index.html (Web Documentation)" \
    "./bin/updatewebdocs 2>&1"

echo ""

# Document 3: CHANGELOG.md - Version History
run_update "changelog" \
    "CHANGELOG.md (Version History)" \
    "./bin/updatechangelog 2>&1"

echo ""

# Document 4: Test Reports - Platform Health
run_update "tests" \
    "Test Reports (Platform Health)" \
    "./bin/runtests -q 2>&1"

echo ""

# Document 5: Session State - Development Metrics
run_update "session" \
    "Session State (Development Metrics)" \
    "echo 'Session state tracked via savesession command' 2>&1"

echo ""

# Document 6: Documentation Statistics
run_update "stats" \
    "Documentation Statistics (Status Dashboard)" \
    "echo '6 core documents synchronized' 2>&1"

echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Summary
if [[ "$DRY_RUN" == "true" ]]; then
    echo -e "${GREEN}✅ Dry Run Complete${NC}"
    echo -e "${CYAN}   Would update: $UPDATED_DOCS documents${NC}"
else
    echo -e "${GREEN}✅ Documentation Update Complete${NC}"
    echo -e "${CYAN}   Successfully updated: $UPDATED_DOCS documents${NC}"
    if [[ $FAILED_DOCS -gt 0 ]]; then
        echo -e "${RED}   Failed updates: $FAILED_DOCS documents${NC}"
    fi
fi

echo ""
echo -e "${CYAN}📊 Core Documentation Status:${NC}"
echo -e "   • ${YELLOW}Strategic Assessment:${NC} WHERE_WE_ARE.md"
echo -e "   • ${YELLOW}Web Documentation:${NC} docs/index.html"
echo -e "   • ${YELLOW}Version History:${NC} CHANGELOG.md"
echo -e "   • ${YELLOW}Platform Health:${NC} Test suite validation"
echo -e "   • ${YELLOW}Session State:${NC} Development metrics tracking"
echo -e "   • ${YELLOW}Documentation Stats:${NC} Synchronized status"
echo ""
echo -e "${CYAN}🎯 Agricultural Platform Status:${NC}"
echo -e "   ${GREEN}Documentation Synchronized${NC} for ISO Compliance and Stakeholder Communication"
echo ""

# Exit with failure if any updates failed
if [[ $FAILED_DOCS -gt 0 ]]; then
    exit 1
fi

exit 0
