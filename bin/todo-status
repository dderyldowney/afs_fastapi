#!/usr/bin/env python3

import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from todowrite.manager import GoalItem, Node, PhaseItem, get_active_items, load_todos  # noqa: E402


def get_status_counts(goals: list[Node]) -> tuple[int, int, int]:
    total = 0
    pending = 0
    completed = 0
    for goal in goals:
        total += 1
        if goal.status == "planned" or goal.status == "in_progress":
            pending += 1
        elif goal.status == "done":
            completed += 1
    return total, pending, completed


# TODO: Fix this function to work with the new Node-based data structure
# def get_phase_status_counts(phase: PhaseItem) -> tuple[int, int, int, int]:
#     total_steps = 0
#     pending_steps = 0
#     in_progress_steps = 0
#     completed_steps = 0
#
#     for step in phase["steps"]:
#         total_steps += 1
#         if step["status"] == "planned":
#             pending_steps += 1
#         elif step["status"] == "in_progress":
#             in_progress_steps += 1
#         elif step["status"] == "done":
#             completed_steps += 1
#     return total_steps, pending_steps, in_progress_steps, completed_steps


def print_progress_bar(progress: float, bar_width: int = 40):
    completed_bars = int(progress / 100 * bar_width)
    pending_bars = bar_width - completed_bars
    progress_bar = "â–ˆ" * completed_bars + "â–‘" * pending_bars
    print(f"Progress: [{progress_bar}] {progress:.1f}%\n")


def main():
    print("=== AFS FastAPI TODO System Status ===")
    print("")

    todos_data = load_todos()
    goals = todos_data.get("Goal", [])

    # Strategic overview
    print("ðŸŽ¯ STRATEGIC DEVELOPMENT MOMENTUM")
    print("=" * 50)

    if goals:
        total_goals, pending_goals, completed_goals = get_status_counts(goals)
        strategic_progress = (completed_goals / total_goals * 100) if total_goals > 0 else 0

        print(f"Total Strategic Objectives: {total_goals}")
        print(f"Completed: {completed_goals} ({strategic_progress:.1f}%)\n")
        print(f"Pending: {pending_goals}")
        print()
        print_progress_bar(strategic_progress)
        print()

        # Show next 3 high-priority strategic objectives (simplified for now)
        # This part needs more logic to determine "high-priority" and "next" based on the new schema
        # For now, just list all pending goals
        pending_strategic_goals = [
            g for g in goals if g.status == "planned" or g.status == "in_progress"
        ]
        if pending_strategic_goals:
            print("Next Strategic Objectives:")
            for i, goal in enumerate(pending_strategic_goals[:3], 1):
                # For Node objects, priority is in metadata.severity, title is direct attribute
                priority = goal.metadata.severity if hasattr(goal, 'metadata') and goal.metadata.severity else "medium"
                print(f'  {i}. {goal.title} (Priority: {priority})')
            print()
    else:
        print("No strategic objectives found.")
        print('Use "add_goal" function to create strategic development goals.')
        print()

    # Phase overview
    print("ðŸ”„ CURRENT PHASE IMPLEMENTATION")
    print("=" * 50)

    active_items = get_active_items(todos_data)
    current_phase = active_items.get("Phase")

    if current_phase:
        # Fixed: Use attribute access instead of dict access
        phase_name = current_phase.title if hasattr(current_phase, 'title') else "Unknown Phase"
        print(f"Active Phase: {phase_name}")
        print(f"Status: {current_phase.status}")
        print()

        # TODO: Implement proper step counting with the new Node structure
        # For now, just show the phase information
        print("Phase details available. Step tracking needs to be implemented with Node relationships.")
        print()

    else:
        print("No active development phase.")
        print('Use "add_phase" function to begin new development phase.')
        print()

    # Overall system status
    print("ðŸ“Š DEVELOPMENT SYSTEM OVERVIEW")
    print("=" * 50)

    total_goals = len(goals)
    # TODO: Calculate total phases when we implement proper Node relationship traversal
    # For now, just count phases in the todos_data
    phases = todos_data.get("Phase", [])
    total_phases = len(phases)
    active_phase_count = 1 if active_items.get("Phase") else 0

    print(f"Strategic Objectives: {total_goals}")
    print(f"Total Development Phases: {total_phases}")
    print(f"Active Development Phases: {active_phase_count}")
    print()

    # Show command quick reference (simplified for now)
    print("ðŸ’¡ QUICK COMMAND REFERENCE")
    print("=" * 50)
    print("Strategic Management:")
    print(
        '  add_goal("Title", "Description", category="category", priority="priority") - Add strategic objective'
    )
    print("  get_goals() - View strategic objectives")
    print()
    print("Phase Management:")
    print('  add_phase("goal_id", "Title", "Description") - Start new phase')
    print(
        '  add_step("phase_id", "Title", "Description") - Add implementation step to active phase'
    )
    print('  add_task("step_id", "Title", "Description") - Add task to step')
    print('  add_subtask("task_id", "Title", "Description", "command") - Add subtask to task')
    print('  execute_subtask("subtask_id") - Execute a subtask')
    print()
    print("Integrated Management:")
    print("  validate_all_items() - Run validation on all items")
    print("  get_active_items() - Get currently active items")
    print("  get_execution_ready_subtasks() - Get subtasks ready for execution")
    print()


if __name__ == "__main__":
    main()
