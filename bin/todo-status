#!/usr/bin/env python3

import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.todos.manager import (  # noqa: E402
    GoalItem,
    PhaseItem,
    get_active_items,
    load_todos,
)


def get_status_counts(goals: list[GoalItem]) -> tuple[int, int, int]:
    total = 0
    pending = 0
    completed = 0
    for goal in goals:
        total += 1
        if goal["status"] == "planned" or goal["status"] == "in_progress":
            pending += 1
        elif goal["status"] == "done":
            completed += 1
    return total, pending, completed


def get_phase_status_counts(phase: PhaseItem) -> tuple[int, int, int, int]:
    total_steps = 0
    pending_steps = 0
    in_progress_steps = 0
    completed_steps = 0

    for step in phase["steps"]:
        total_steps += 1
        if step["status"] == "planned":
            pending_steps += 1
        elif step["status"] == "in_progress":
            in_progress_steps += 1
        elif step["status"] == "done":
            completed_steps += 1
    return total_steps, pending_steps, in_progress_steps, completed_steps


def print_progress_bar(progress: float, bar_width: int = 40):
    completed_bars = int(progress / 100 * bar_width)
    pending_bars = bar_width - completed_bars
    progress_bar = "‚ñà" * completed_bars + "‚ñë" * pending_bars
    print(f"Progress: [{progress_bar}] {progress:.1f}%\n")


def main():
    print("=== AFS FastAPI TODO System Status ===")
    print("")

    todos_data = load_todos()
    goals = todos_data.get("Goal", [])

    # Strategic overview
    print("üéØ STRATEGIC DEVELOPMENT MOMENTUM")
    print("=" * 50)

    if goals:
        total_goals, pending_goals, completed_goals = get_status_counts(goals)
        strategic_progress = (completed_goals / total_goals * 100) if total_goals > 0 else 0

        print(f"Total Strategic Objectives: {total_goals}")
        print(f"Completed: {completed_goals} ({strategic_progress:.1f}%)\n")
        print(f"Pending: {pending_goals}")
        print()
        print_progress_bar(strategic_progress)
        print()

        # Show next 3 high-priority strategic objectives (simplified for now)
        # This part needs more logic to determine "high-priority" and "next" based on the new schema
        # For now, just list all pending goals
        pending_strategic_goals = [
            g for g in goals if g["status"] == "planned" or g["status"] == "in_progress"
        ]
        if pending_strategic_goals:
            print("Next Strategic Objectives:")
            for i, goal in enumerate(pending_strategic_goals[:3], 1):
                print(f'  {i}. {goal["title"]} (Priority: {goal["priority"]})')
            print()
    else:
        print("No strategic objectives found.")
        print('Use "add_goal" function to create strategic development goals.')
        print()

    # Phase overview
    print("üîÑ CURRENT PHASE IMPLEMENTATION")
    print("=" * 50)

    active_items = get_active_items(todos_data)
    current_phase = active_items.get("Phase")

    if current_phase:
        phase_name = current_phase.get("title", "Unknown Phase")
        print(f"Active Phase: {phase_name}")
        print()

        total_steps, pending_steps, in_progress_steps, completed_steps = get_phase_status_counts(
            current_phase
        )
        phase_progress = (completed_steps / total_steps * 100) if total_steps > 0 else 0

        print(f"Phase Steps: {total_steps} total")
        print(f"Completed: {completed_steps} ({phase_progress:.1f}%)\n")
        print(f"In Progress: {in_progress_steps}")
        print(f"Pending: {pending_steps}")
        print()
        print_progress_bar(phase_progress)
        print()

        # Show current and next steps (simplified for now)
        in_progress_phase_steps = [
            s for s in current_phase["steps"] if s["status"] == "in_progress"
        ]
        if in_progress_phase_steps:
            print("Currently Working On:")
            for step in in_progress_phase_steps:
                print(f'  ‚óê {step["title"]}')
            print()

        pending_phase_steps = [s for s in current_phase["steps"] if s["status"] == "planned"]
        if pending_phase_steps:
            print("Next Steps:")
            for step in pending_phase_steps[:3]:
                print(f'  ‚óã {step["title"]}')
            print()

        if pending_steps == 0 and in_progress_steps == 0:
            print("üéâ Phase ready for completion!")
            print('Use "end_phase" function to archive this phase.')
    else:
        print("No active development phase.")
        print('Use "add_phase" function to begin new development phase.')
        print()

    # Overall system status
    print("üìä DEVELOPMENT SYSTEM OVERVIEW")
    print("=" * 50)

    total_goals = len(goals)
    total_phases = sum(len(g["phases"]) for g in goals)
    active_phase_count = 1 if active_items.get("Phase") else 0

    print(f"Strategic Objectives: {total_goals}")
    print(f"Total Development Phases: {total_phases}")
    print(f"Active Development Phases: {active_phase_count}")
    print(f"Current Phase Steps: {total_steps if current_phase else 0}")
    print()

    # Show command quick reference (simplified for now)
    print("üí° QUICK COMMAND REFERENCE")
    print("=" * 50)
    print("Strategic Management:")
    print(
        '  add_goal("Title", "Description", category="category", priority="priority") - Add strategic objective'
    )
    print("  get_goals() - View strategic objectives")
    print()
    print("Phase Management:")
    print('  add_phase("goal_id", "Title", "Description") - Start new phase')
    print(
        '  add_step("phase_id", "Title", "Description") - Add implementation step to active phase'
    )
    print('  add_task("step_id", "Title", "Description") - Add task to step')
    print('  add_subtask("task_id", "Title", "Description", "command") - Add subtask to task')
    print('  execute_subtask("subtask_id") - Execute a subtask')
    print()
    print("Integrated Management:")
    print("  validate_all_items() - Run validation on all items")
    print("  get_active_items() - Get currently active items")
    print("  get_execution_ready_subtasks() - Get subtasks ready for execution")
    print()


if __name__ == "__main__":
    main()
