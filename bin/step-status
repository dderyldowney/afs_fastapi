# type: ignore
#!/usr/bin/env python3
"""Show current step status for the active phase."""

import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.core.todos_manager import get_active_items  # noqa: E402


def main():
    active_items = get_active_items()
    active_phase = active_items["phase"]
    active_step = active_items["step"]

    if not active_phase:
        print("No active phase found.")
        print("Use './bin/phase-start <name> <strategic_goal_id>' to start a phase.")
        sys.exit(1)

    if not active_step:
        print("No active step found in the active phase.")
        print("Use './bin/step-activate <ID>' to activate an existing step.")
        sys.exit(1)

    print("=== AFS FastAPI Step Status ===")
    print()
    print(f"🚀 Active Phase: {active_phase['title']}")
    print(f"   Phase Status: {active_phase['status']}")

    steps = active_phase.get("steps", [])
    if not steps:
        print()
        print("📋 No steps found in active phase.")
        print("Use './bin/step-add <name>' to add a step.")
        return

    # Count step status
    total_steps = len(steps)
    completed_steps = len([s for s in steps if s.get("status") == "done"])
    in_progress_steps = len([s for s in steps if s.get("status") == "in_progress"])
    planned_steps = len([s for s in steps if s.get("status") == "planned"])

    print()
    print("📊 Step Progress")
    print(f"   Total Steps: {total_steps}")
    print(f"   Completed: {completed_steps} ({completed_steps/total_steps*100:.1f}%)")
    print(f"   In Progress: {in_progress_steps}")
    print(f"   Planned: {planned_steps}")

    # Progress bar
    progress = completed_steps / total_steps if total_steps > 0 else 0
    bar_length = 40
    filled_length = int(bar_length * progress)
    bar = "█" * filled_length + "░" * (bar_length - filled_length)
    print(f"   Progress: [{bar}] {progress:.1%}")

    print()
    print("📋 Steps")

    active_step_id = active_step["id"] if active_step else None

    for i, step in enumerate(steps, 1):
        status_symbol = {'planned': '○', 'in_progress': '◐', 'done': '●', 'blocked': '🚫', 'rejected': '❌'}.get(step['status'], '?')
        active_marker = " ⚡" if step["id"] == active_step_id else ""

        task_count = len(step.get("tasks", []))
        completed_tasks = len([t for t in step.get("tasks", []) if t.get("status") == "done"])

        print(f" {i:2d}. {status_symbol} {step['title']}{active_marker}")
        print(f"     ID: {step['id']}")
        print(f"     Status: {step['status']}")
        print(f"     Tasks: {completed_tasks}/{task_count}")

    print()
    print("Commands:")
    print("  ./bin/step-add <name>              - Add new step")
    print("  ./bin/step-activate <step_id>      - Activate step")
    print("  ./bin/step-complete <step_id>      - Complete step")
    print("  ./bin/task-add <description>       - Add task to active step")


if __name__ == "__main__":
    main()
