#!/usr/bin/env python3
# type: ignore

import argparse
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from todowrite.app import ToDoWrite  # noqa: E402
from todowrite.db.models import Node  # noqa: E402


def main():
    # Initialize ToDoWrite app instance
    app = ToDoWrite()
    parser = argparse.ArgumentParser(description="Delete a Phase from the ToDoWrite system.")
    parser.add_argument("phase_id", type=str, help="The ID of the phase to delete.")
    parser.add_argument("--confirm", action="store_true", help="Confirm deletion without prompt.")
    args = parser.parse_args()

    # Verify phase exists
    todos = app.load_todos()
    phases = todos.get("Phase", [])
    phase = None
    for p in phases:
        if p.id == args.phase_id:
            phase = p
            break

    if not phase:
        print(f"Error: Phase with ID '{args.phase_id}' not found.")
        sys.exit(1)

    # Confirm deletion
    if not args.confirm:
        print(f"Are you sure you want to delete phase '{phase.title}' ({args.phase_id})? [y/N]: ", end="")
        response = input().strip().lower()
        if response not in ['y', 'yes']:
            print("Deletion cancelled.")
            sys.exit(0)

    try:
        app.delete_node(args.phase_id)
        print("âœ“ Phase deleted successfully!")
        print(f"  ID: {args.phase_id}")
        print(f"  Title: {phase.title}")
        print()
        print("Use './bin/phase-status' to view updated phases.")
    except Exception as e:
        print(f"Error deleting phase: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
