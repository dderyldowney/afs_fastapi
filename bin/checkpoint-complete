#!/usr/bin/env python3
"""
Checkpoint Completion Tool for AFS FastAPI Agricultural Robotics Platform.

Follows the same pattern as goal-complete, phase-complete, etc.
Marks checkpoints as completed with comprehensive feedback.
"""

from __future__ import annotations

import argparse
import sys
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Add bin directory to sys.path for common modules
bin_path = project_root / "bin"
if bin_path.exists():
    sys.path.insert(0, str(bin_path))

from common.json_operations import load_json, save_json


def mark_checkpoint_completed(checkpoint_id: str) -> bool:
    """Mark a checkpoint as completed."""
    checkpoints_file = project_root / ".claude" / "checkpoints.json"
    checkpoints = load_json(checkpoints_file, default=[])

    for checkpoint in checkpoints:
        if checkpoint["id"] == checkpoint_id:
            old_status = checkpoint.get("status", "no status")
            checkpoint["status"] = "completed"

            if save_json(checkpoints_file, checkpoints):
                print("✅ Checkpoint marked as completed!")
                print(f"  ID: {checkpoint['id']}")
                print(f"  Description: {checkpoint['description']}")
                print(f"  Status: {old_status} → completed")
                print(f"  Git Hash: {checkpoint['git_hash'][:8]}...")
                print()
                print("Use './bin/checkpoint-status list' to view all checkpoint statuses.")
                return True
            else:
                print(f"❌ Failed to save checkpoints file")
                return False

    print(f"❌ Checkpoint '{checkpoint_id}' not found")
    return False


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Mark a checkpoint as completed in the AFS FastAPI agricultural robotics system."
    )
    parser.add_argument("checkpoint_id", type=str, help="The ID of the checkpoint to complete.")
    args = parser.parse_args()

    success = mark_checkpoint_completed(args.checkpoint_id)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()