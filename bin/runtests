#!/bin/bash

# runtests - AFS FastAPI Test Suite Executor
# Executes comprehensive test suite with standardized reporting format
# MANDATORY for ALL AI agents: Claude, GPT, Gemini, Copilot, CodeWhisperer

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}🧪 AFS FastAPI Test Suite Executor${NC}"
echo -e "${BLUE}${BOLD}====================================${NC}"
echo

# Determine project root relative to this script for robust pathing
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Change to project root to ensure pytest finds tests correctly
cd "${PROJECT_ROOT}"

echo -e "${YELLOW}📍 Working Directory:${NC} ${PROJECT_ROOT}"
echo -e "${YELLOW}🐍 Python Environment:${NC} $(which python3)"
echo -e "${YELLOW}📦 pytest Version:${NC} $(pytest --version 2>&1 | head -1)"
echo

# Parse command-line arguments for test variations
VERBOSE=true
COVERAGE=false
SPECIFIC_PATH=""
QUICK_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -q|--quiet)
            VERBOSE=false
            shift
            ;;
        --cov|--coverage)
            COVERAGE=true
            shift
            ;;
        --quick)
            QUICK_MODE=true
            shift
            ;;
        *)
            SPECIFIC_PATH="$1"
            shift
            ;;
    esac
done

# Build pytest command based on arguments
PYTEST_CMD="pytest --tb=short"

if [ "$VERBOSE" = true ]; then
    PYTEST_CMD="${PYTEST_CMD} -v"
else
    PYTEST_CMD="${PYTEST_CMD} -q"
fi

if [ "$COVERAGE" = true ]; then
    PYTEST_CMD="${PYTEST_CMD} --cov=afs_fastapi --cov-report=html"
fi

# Note: Timeout configuration managed via pytest.ini, not command-line flags
# Quick mode simply runs with default pytest.ini settings

if [ -n "$SPECIFIC_PATH" ]; then
    PYTEST_CMD="${PYTEST_CMD} ${SPECIFIC_PATH}"
fi

echo -e "${BLUE}🚀 Executing Test Suite...${NC}"
echo -e "${YELLOW}Command:${NC} ${PYTEST_CMD}"
echo
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo

# Execute tests and capture exit code
set +e
$PYTEST_CMD
TEST_EXIT_CODE=$?
set -e

echo
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo

# Display results summary
if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}${BOLD}✅ Test Suite Execution: ALL TESTS PASSING${NC}"
    echo
    echo -e "${GREEN}Platform Health: EXCELLENT${NC}"
    echo -e "   • Zero test failures detected"
    echo -e "   • Agricultural compliance validated"
    echo -e "   • Safety-critical systems operational"
else
    echo -e "${RED}${BOLD}❌ Test Suite Execution: TESTS FAILING${NC}"
    echo
    echo -e "${RED}Platform Health: REQUIRES ATTENTION${NC}"
    echo -e "   • Test failures detected (see output above)"
    echo -e "   • Review failed tests for safety-critical impacts"
    echo -e "   • Address failures before committing changes"
fi

echo

# Mandatory reporting reminder for AI agents
echo -e "${YELLOW}${BOLD}📋 MANDATORY: Standardized Test Reporting Required${NC}"
echo -e "${YELLOW}═════════════════════════════════════════════════════${NC}"
echo -e "ALL AI agents MUST provide standardized test analysis:"
echo -e "   1. ${BOLD}Executive Summary Block${NC}: Pass/fail status with key metrics"
echo -e "   2. ${BOLD}Insight Block${NC}: Educational analysis (Explanatory style)"
echo -e "   3. ${BOLD}Test Distribution Analysis${NC}: Category breakdown with file links"
echo -e "   4. ${BOLD}Platform Health Indicators${NC}: ✓/✗ checklist format"
echo -e "   5. ${BOLD}Agricultural Context${NC}: Safety-critical & ISO compliance highlights"
echo -e "   6. ${BOLD}Advisory Notes${NC}: Warnings and recommended improvements"
echo
echo -e "${YELLOW}Reference: .claude/TEST_REPORTING_MANDATORY.md${NC}"
echo -e "${YELLOW}Applies to: Claude, GPT, Gemini, Copilot, CodeWhisperer, all AI agents${NC}"
echo

if [ "$COVERAGE" = true ]; then
    echo -e "${BLUE}📊 Coverage Report Generated${NC}"
    echo -e "   Location: ${PROJECT_ROOT}/htmlcov/index.html"
    echo -e "   Open in browser to view detailed coverage analysis"
    echo
fi

echo -e "${BLUE}💡 Additional Test Commands:${NC}"
echo -e "   • ${GREEN}./bin/runtests${NC}                      - Standard verbose test run"
echo -e "   • ${GREEN}./bin/runtests --quick${NC}              - Quick mode (same as standard)"
echo -e "   • ${GREEN}./bin/runtests --coverage${NC}           - With HTML coverage report"
echo -e "   • ${GREEN}./bin/runtests -q${NC}                   - Quiet mode (less output)"
echo -e "   • ${GREEN}./bin/runtests tests/unit/equipment/${NC} - Specific test directory"
echo

if [ $TEST_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}${BOLD}✨ AFS FastAPI Test Suite: READY FOR DEVELOPMENT${NC}"
else
    echo -e "${RED}${BOLD}⚠️  AFS FastAPI Test Suite: FIX FAILURES BEFORE PROCEEDING${NC}"
fi

echo

exit $TEST_EXIT_CODE
