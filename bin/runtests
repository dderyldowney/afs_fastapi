#!/bin/bash

set -euo pipefail

PROJECT_ROOT=$(git rev-parse --show-toplevel)
cd "$PROJECT_ROOT"

PYTEST_ARGS="-v --tb=short"
TIMEOUT=60
COVERAGE=false
PATHS=()

print_usage() {
    echo "Usage: $(basename "$0") [-h] [-q] [-c] [-t TIMEOUT] [PATHS...]"
    echo "  -h, --help      Show this help message and exit."
    echo "  -q, --quiet     Run pytest in quiet mode."
    echo "  -c, --coverage  Generate a coverage report."
    echo "  -t TIMEOUT      Set a timeout in seconds for each test (default: 60)."
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -q|--quiet)
            PYTEST_ARGS="${PYTEST_ARGS//-v/}"
            PYTEST_ARGS+=" -q"
            shift
            ;;
        -c|--coverage)
            COVERAGE=true
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        *)
            PATHS+=("$1")
            shift
            ;;
    esac
done

FINAL_CMD="pytest $PYTEST_ARGS --timeout=$TIMEOUT"

if [ "$COVERAGE" = true ]; then
    FINAL_CMD+=" --cov=afs_fastapi --cov-report=html"
fi

if [ ${#PATHS[@]} -gt 0 ]; then
    FINAL_CMD+=" ${PATHS[*]}"
fi

echo "ðŸš€ Running tests: $FINAL_CMD"
eval "$FINAL_CMD"
