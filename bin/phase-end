# type: ignore
#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.core.todos_manager import end_phase, get_active_phase  # noqa: E402


def main():
    parser = argparse.ArgumentParser(description="Complete and archive the current development phase.")
    parser.add_argument("--force", action="store_true", help="Force end the phase even if there are pending tasks.")
    args = parser.parse_args()

    active_phase = get_active_phase()
    if not active_phase:
        print("Error: No active development phase found.")
        sys.exit(1)

    print("=== Completing Development Phase ===")
    print()
    print(f"Phase: {active_phase.get('name', 'Unknown Phase')}")
    
    tasks = active_phase.get('tasks', [])
    pending_tasks = [t for t in tasks if t.get('status') == 'pending']
    
    if pending_tasks and not args.force:
        print("⚠️  Warning: Phase has incomplete steps!")
        print()
        print("Incomplete steps:")
        for task in pending_tasks[:5]:
            print(f"  ○ {task['description']}")
        if len(pending_tasks) > 5:
            print(f"  ... and {len(pending_tasks) - 5} more")
        print()
        print("Options:")
        print('1. Complete remaining steps with "./bin/phase-complete"')
        print("2. Force end phase anyway (run with --force)")
        print("3. Cancel and continue working on phase")
        print()
        sys.exit(0)

    ended_phase, error = end_phase(args.force)

    if error:
        print(f"Error: {error}")
        sys.exit(1)

    if ended_phase:
        print()
        print("🎉 Phase completed and archived!")
        print(f"   Phase: {ended_phase['name']}")
        print(f"   Completed at: {ended_phase['date_completed']}")
        print()
        print("Next steps:")
        print('1. Use "./bin/strategic-list" to see remaining strategic objectives')
        print('2. Use "./bin/phase-start" to begin next development phase')
        print('3. Use "./bin/todo-status" for overall development status')

if __name__ == "__main__":
    main()
# Auto-sync TODO state for session persistence
./bin/todo-sync --silent 2>/dev/null || true
