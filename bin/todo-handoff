#!/bin/bash

# todo-handoff: Prepare development context for session handoff
# Usage: ./bin/todo-handoff

set -euo pipefail

# Ensure we're in the project root
if [[ ! -f ".claude/DUAL_TODO_SYSTEM.md" ]]; then
    echo "Error: Must be run from AFS FastAPI project root directory"
    exit 1
fi

STRATEGIC_FILE=".claude/strategic_todos.json"
PHASE_FILE=".claude/phase_todos.json"

echo "=== AFS FastAPI Development Session Handoff ==="
echo ""

# Generate comprehensive handoff information
python3 -c "
import json
import sys
from datetime import datetime, timezone

# Read strategic todos
strategic_data = {}
strategic_todos = []
try:
    with open('$STRATEGIC_FILE', 'r') as f:
        strategic_data = json.load(f)
    strategic_todos = strategic_data.get('todos', [])
except:
    pass

# Read phase todos
phase_data = {}
phase_todos = []
current_phase = {}
try:
    with open('$PHASE_FILE', 'r') as f:
        phase_data = json.load(f)
    phase_todos = phase_data.get('todos', [])
    current_phase = phase_data.get('current_phase', {})
except:
    pass

# Current development state summary
print('📋 DEVELOPMENT STATE SUMMARY')
print('='*60)

# Strategic context
if strategic_todos:
    strategic_pending = [t for t in strategic_todos if t['status'] == 'pending']
    strategic_completed = [t for t in strategic_todos if t['status'] == 'completed']

    print(f'Strategic Development Status:')
    print(f'  • Total Objectives: {len(strategic_todos)}')
    print(f'  • Completed: {len(strategic_completed)} ({len(strategic_completed)/len(strategic_todos)*100:.1f}%)')
    print(f'  • Remaining: {len(strategic_pending)}')
    print()

    # Recent strategic achievement
    if strategic_completed:
        recent_completed = sorted(strategic_completed, key=lambda x: x.get('completed_at', ''), reverse=True)
        latest = recent_completed[0]
        completed_date = latest.get('completed_at', '')[:10] if latest.get('completed_at') else 'Unknown'
        print(f'Most Recent Strategic Achievement:')
        print(f'  ✓ {latest[\"content\"]} (completed {completed_date})')
        print()

    # Next high-priority strategic objectives
    high_priority = [t for t in strategic_pending if t.get('priority') == 'high']
    if high_priority:
        print(f'Next High-Priority Strategic Objectives:')
        for i, todo in enumerate(high_priority[:3], 1):
            category = todo.get('category', 'general')
            print(f'  {i}. {todo[\"content\"]} [{category}]')
        print()
else:
    print('No strategic objectives defined.')
    print('Recommend: Use \"./bin/strategic-add\" to establish strategic development goals.')
    print()

# Current phase context
if current_phase.get('status') == 'active':
    phase_name = current_phase.get('name', 'Unknown Phase')
    strategic_id = current_phase.get('strategic_todo_id')
    started_at = current_phase.get('started_at', '')

    print(f'Active Development Phase:')
    print(f'  • Phase: {phase_name}')

    # Strategic alignment
    if strategic_id:
        aligned_strategic = next((t for t in strategic_todos if t['id'] == strategic_id), None)
        if aligned_strategic:
            print(f'  • Strategic Alignment: {aligned_strategic[\"content\"]}')

    # Phase duration
    if started_at and 'T' in started_at:
        start_date = started_at[:10]
        current_date = datetime.now().strftime('%Y-%m-%d')
        print(f'  • Duration: {start_date} to {current_date}')

    print()

    if phase_todos:
        phase_pending = [t for t in phase_todos if t['status'] == 'pending']
        phase_in_progress = [t for t in phase_todos if t['status'] == 'in_progress']
        phase_completed = [t for t in phase_todos if t['status'] == 'completed']
        phase_progress = (len(phase_completed) / len(phase_todos) * 100) if phase_todos else 0

        print(f'Phase Implementation Status:')
        print(f'  • Total Steps: {len(phase_todos)}')
        print(f'  • Completed: {len(phase_completed)} ({phase_progress:.1f}%)')
        print(f'  • In Progress: {len(phase_in_progress)}')
        print(f'  • Pending: {len(phase_pending)}')
        print()

        # Current work state
        if phase_in_progress:
            print(f'Currently Working On:')
            for step in phase_in_progress:
                time_info = f' (~{step[\"estimated_minutes\"]}min)' if 'estimated_minutes' in step else ''
                print(f'  🔄 {step[\"content\"]}{time_info}')
            print()

        # Immediate next steps
        if phase_pending:
            priority_order = {'high': 0, 'medium': 1, 'low': 2}
            next_steps = sorted(phase_pending, key=lambda x: priority_order.get(x.get('priority', 'medium'), 999))

            print(f'Immediate Next Steps:')
            for step in next_steps[:3]:
                priority_marker = {'high': '[HIGH]', 'medium': '[MED]', 'low': '[LOW]'}.get(step.get('priority', 'medium'), '')
                time_info = f' (~{step[\"estimated_minutes\"]}min)' if 'estimated_minutes' in step else ''
                print(f'  📋 {priority_marker} {step[\"content\"]}{time_info}')

            if len(next_steps) > 3:
                print(f'     ... plus {len(next_steps) - 3} additional pending steps')
            print()

        # Time estimates for handoff planning
        remaining_work = [t for t in phase_todos if t['status'] in ['pending', 'in_progress']]
        if remaining_work:
            total_time = sum(t.get('estimated_minutes', 30) for t in remaining_work)
            hours = total_time // 60
            minutes = total_time % 60

            print(f'Estimated Work Remaining:')
            if hours > 0:
                print(f'  ⏱️  Approximately {hours}h {minutes}m for {len(remaining_work)} remaining steps')
            else:
                print(f'  ⏱️  Approximately {minutes}m for {len(remaining_work)} remaining steps')
            print()

        # Phase completion readiness
        if not phase_pending and not phase_in_progress:
            print(f'🎉 Phase Ready for Completion!')
            print(f'   All {len(phase_completed)} steps completed.')
            print(f'   Next: Use \"./bin/phase-end\" to archive phase and update strategic progress.')
            print()
    else:
        print(f'Phase started but no implementation steps defined.')
        print(f'Next: Use \"./bin/phase-add\" to add TDD implementation steps.')
        print()
else:
    print(f'No Active Development Phase:')
    print(f'  • Status: Ready to begin new development work')

    # Show last completed phase context
    last_phase = current_phase.get('last_completed_phase')
    if last_phase:
        phase_name = last_phase.get('name', 'Unknown Phase')
        completed_at = last_phase.get('completed_at', '')
        final_stats = last_phase.get('final_stats', {})

        if completed_at and 'T' in completed_at:
            completed_date = completed_at[:10]
            print(f'  • Last Completed: {phase_name} ({completed_date})')

            if final_stats:
                completion_pct = final_stats.get('completion_percentage', 0)
                total_steps = final_stats.get('total_steps', 0)
                completed_steps = final_stats.get('completed_steps', 0)
                print(f'  • Final Status: {completed_steps}/{total_steps} steps ({completion_pct:.1f}%)')

    print(f'  • Next: Choose strategic objective and use \"./bin/phase-start\" to begin new phase')
    print()

# Critical handoff information
print('🔄 SESSION HANDOFF CHECKLIST')
print('='*60)

handoff_items = []

# Strategic context items
if strategic_todos:
    strategic_pending = [t for t in strategic_todos if t['status'] == 'pending']
    if strategic_pending:
        handoff_items.append(f'Strategic: {len(strategic_pending)} pending objectives available for development')

# Phase context items
if current_phase.get('status') == 'active':
    if phase_todos:
        phase_in_progress = [t for t in phase_todos if t['status'] == 'in_progress']
        phase_pending = [t for t in phase_todos if t['status'] == 'pending']

        if phase_in_progress:
            handoff_items.append(f'Active Work: {len(phase_in_progress)} step(s) currently in progress')
        if phase_pending:
            handoff_items.append(f'Phase Queue: {len(phase_pending)} step(s) ready for implementation')

        if not phase_pending and not phase_in_progress:
            handoff_items.append(f'Phase Complete: Ready to archive and move to next strategic objective')
    else:
        handoff_items.append(f'Phase Planning: Active phase needs implementation steps')
else:
    handoff_items.append(f'Phase Planning: Ready to start new development phase')

# Development tools available
handoff_items.append(f'Tools: Dual TODO system fully operational with 12 management commands')

for i, item in enumerate(handoff_items, 1):
    print(f'{i}. {item}')

print()

# Essential commands for next session
print('🛠️  ESSENTIAL COMMANDS FOR NEXT SESSION')
print('='*60)
print('Context Restoration:')
print('  ./bin/todo-restore                      - Load complete development context')
print('  ./bin/loadsession                       - Standard session initialization')
print()
print('Development Management:')
if current_phase.get('status') == 'active':
    print('  ./bin/phase-status                      - Check current phase progress')
    if phase_todos:
        in_progress_count = len([t for t in phase_todos if t['status'] == 'in_progress'])
        pending_count = len([t for t in phase_todos if t['status'] == 'pending'])
        if in_progress_count > 0:
            print('  ./bin/phase-complete \"Step\"             - Complete current work')
        if pending_count > 0:
            print('  ./bin/phase-add \"Next Step\"             - Add implementation step')
    else:
        print('  ./bin/phase-add \"Implementation Step\"     - Add phase steps')
else:
    print('  ./bin/strategic-list                    - View available strategic objectives')
    print('  ./bin/phase-start \"Phase Name\"          - Begin new development phase')

print('  ./bin/todo-status                       - Comprehensive development overview')
print()

# Platform status
print('🏗️  PLATFORM STATUS')
print('='*60)
print('AFS FastAPI Agricultural Robotics Platform')

# Latest updates
strategic_updated = strategic_data.get('metadata', {}).get('last_updated', 'Unknown')
phase_updated = phase_data.get('metadata', {}).get('last_updated', 'Unknown')

if strategic_updated != 'Unknown' or phase_updated != 'Unknown':
    latest_update = 'Unknown'
    if strategic_updated != 'Unknown' and phase_updated != 'Unknown':
        latest_update = max(strategic_updated, phase_updated)
    elif strategic_updated != 'Unknown':
        latest_update = strategic_updated
    elif phase_updated != 'Unknown':
        latest_update = phase_updated

    if latest_update != 'Unknown' and 'T' in latest_update:
        update_date = latest_update[:10]
        update_time = latest_update[11:16]
        print(f'Last Development Activity: {update_date} {update_time} UTC')

print('Dual TODO System: Operational')
print('Strategic Tracking: Active')
print('Phase Management: Ready')
print()

print('Session handoff preparation complete. Use \"./bin/todo-restore\" in next session.')
"
# Auto-sync TODO state for session persistence
./bin/todo-sync --silent 2>/dev/null || true
