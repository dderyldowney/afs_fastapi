#!/usr/bin/env python3
# type: ignore

import subprocess
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.todos.manager import init_database, load_todos, get_goals, create_node


def initialize_todowrite_system():
    """Initialize and populate ToDoWrite system with agricultural robotics context."""
    print("üèóÔ∏è  Initializing ToDoWrite Database...")

    # Ensure database is initialized
    try:
        init_database()
        print("‚úÖ ToDoWrite database initialized")
    except Exception as e:
        print(f"‚ö†Ô∏è  Database initialization error: {e}")

    # Load existing data
    todos_data = load_todos()
    goals = get_goals()

    # Populate with agricultural robotics strategic context if empty
    if not goals:
        print("üìã Populating agricultural robotics strategic context...")

        strategic_goals = [
            {
                'id': 'GOAL-AFS-AGRICULTURAL-AUTOMATION',
                'layer': 'Goal',
                'title': 'AFS FastAPI Agricultural Automation Platform',
                'description': 'Develop comprehensive FastAPI platform for autonomous agricultural equipment coordination, safety compliance, and multi-tractor field operations with ISO 11783/18497 standards adherence',
                'status': 'in_progress',
                'metadata': {
                    'owner': 'agricultural-automation-team',
                    'severity': 'high',
                    'work_type': 'architecture',
                    'labels': ['agricultural', 'autonomous', 'safety-critical', 'multi-tractor']
                },
                'links': {
                    'parents': [],
                    'children': []
                }
            },
            {
                'id': 'GOAL-SAFETY-COMPLIANCE-SYSTEMS',
                'layer': 'Goal',
                'title': 'Safety-Critical Agricultural Systems Compliance',
                'description': 'Implement and maintain ISO 25119, ISO 11783, and ISO 18497 compliance for agricultural robotics with emergency stop systems and real-time safety monitoring',
                'status': 'in_progress',
                'metadata': {
                    'owner': 'safety-compliance-team',
                    'severity': 'high',
                    'work_type': 'validation',
                    'labels': ['safety-critical', 'iso-compliance', 'emergency-systems']
                },
                'links': {
                    'parents': [],
                    'children': []
                }
            },
            {
                'id': 'GOAL-MULTI-TRACTOR-COORDINATION',
                'layer': 'Goal',
                'title': 'Multi-Tractor Field Coordination System',
                'description': 'Enable coordinated autonomous field operations for multiple tractors with CAN bus communication, GPS synchronization, and collision avoidance for agricultural productivity optimization',
                'status': 'planned',
                'metadata': {
                    'owner': 'field-operations-team',
                    'severity': 'med',
                    'work_type': 'implementation',
                    'labels': ['multi-tractor', 'coordination', 'can-bus', 'field-operations']
                },
                'links': {
                    'parents': [],
                    'children': []
                }
            }
        ]

        # Create strategic goals
        goals_created = 0
        for goal_data in strategic_goals:
            try:
                create_node(goal_data)
                goals_created += 1
                print(f"   ‚úÖ Created: {goal_data['title']}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Failed to create goal {goal_data['id']}: {e}")

        print(f"‚úÖ Created {goals_created} strategic goals for agricultural robotics")
    else:
        print(f"‚úÖ Found {len(goals)} existing strategic goals")

    return todos_data


def main():
    print("üöÄ AFS FastAPI Enhanced Session Context Loader")
    print("===============================================")
    print()

    print("üåæ Initializing Agricultural Robotics ToDoWrite System...")
    todos_data = initialize_todowrite_system()
    print()

    # Enhanced: Initialize session monitoring
    print("üìä Initializing Session Monitoring...")
    try:
        subprocess.run(
            ["./bin/session-monitor", "start"], cwd=project_root, check=True, capture_output=True
        )
        print("‚úÖ Session monitoring initialized")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  Session monitoring initialization failed (continuing)")
    print()

    # Enhanced: Check for pause structure compliance
    print("üìã Validating Pause Structure Compliance...")
    pause_spec_file = project_root / "PAUSE_STRUCTURE_SPECIFICATION.md"
    if pause_spec_file.exists():
        print("‚úÖ Pause structure specification found")
        print("‚úÖ Mandatory pause structure will be enforced")
    else:
        print("‚ö†Ô∏è  Pause structure specification missing")
    print()

    print("üéâ Session Context Successfully Restored!")
    print()

    # Enhanced: Session monitoring status check
    print("üìä Current Session Status:")
    try:
        result = subprocess.run(
            ["./bin/session-monitor", "status"], cwd=project_root, capture_output=True, text=True
        )
        if result.returncode == 0:
            # Extract key status lines
            for line in result.stdout.split("\n"):
                if any(keyword in line for keyword in ["Duration:", "State:", "Action:"]):
                    print(f"   {line.strip()}")
        else:
            print("   Session monitoring unavailable")
    except Exception:
        print("   Session monitoring error")
    print()

    # Enhanced: Git status and quality reminder
    print("üìã Current Git Status:")
    try:
        git_result = subprocess.run(
            ["git", "status", "--porcelain"], cwd=project_root, capture_output=True, text=True
        )
        if git_result.stdout.strip():
            print("   ‚ö†Ô∏è  Uncommitted changes detected")
            print("   üìù Remember: Quality gates must pass before pausing")
        else:
            print("   ‚úÖ Working tree clean")
    except Exception:
        print("   ‚ùå Git status check failed")
    print()

    print("üåæ ToDoWrite Agricultural Robotics System Status:")
    try:
        # Display strategic overview
        strategic_result = subprocess.run(
            ["./bin/strategic-status"], cwd=project_root, capture_output=True, text=True, timeout=10
        )
        if strategic_result.returncode == 0:
            lines = strategic_result.stdout.split('\n')
            for line in lines:
                if 'Total Strategic Objectives:' in line or 'Completed:' in line or 'In Progress:' in line:
                    print(f"   üìä {line.strip()}")

        # Display current development status
        todo_result = subprocess.run(
            ["./bin/todo-status"], cwd=project_root, capture_output=True, text=True, timeout=10
        )
        if todo_result.returncode == 0:
            if "No active development phase" in todo_result.stdout:
                print("   üîÑ Ready to start new development phase")
            else:
                print("   üîÑ Active development phase detected")

    except Exception as e:
        print(f"   ‚ö†Ô∏è  TodoWrite status check failed: {e}")
    print()

    print("üìã ToDoWrite Management Commands:")
    print("   ‚Ä¢ ./bin/strategic-status - View strategic goals progress")
    print("   ‚Ä¢ ./bin/todo-status - Complete system overview")
    print("   ‚Ä¢ ./bin/phase-status - Current development phase")
    print("   ‚Ä¢ ./bin/phase-start \"<name>\" <goal-id> - Start new phase")
    print("   ‚Ä¢ ./bin/step-add \"<name>\" - Add implementation step")
    print("   ‚Ä¢ ./bin/task-add \"<title>\" - Add development task")
    print("   ‚Ä¢ ./bin/saveandpush \"<message>\" - Save progress and push")
    print()

    print("üíæ Enhanced Session Management Commands:")
    print("   ‚Ä¢ ./bin/savesession - Save session state before ending")
    print("   ‚Ä¢ ./bin/loadsession - Restore session context")
    print()
    print("‚è∏Ô∏è  Mandatory Pause Structure Commands:")
    print('   ‚Ä¢ ./bin/quality-check-and-pause "[reason]" "[next]" - Quality-validated pause')
    print('   ‚Ä¢ ./bin/emergency-pause "[reason]" - Emergency pause (bypasses quality gates)')
    print('   ‚Ä¢ ./bin/strategic-milestone-pause "[goal]" "complete" - Strategic milestone')
    print("   ‚Ä¢ ./bin/session-monitor check - Check session duration and warnings")
    print()

    print("üîß Development Workflow Reminders:")
    print("   ‚Ä¢ Follow TDD: RED ‚Üí GREEN ‚Üí REFACTOR ‚Üí Quality Check ‚Üí Commit")
    print("   ‚Ä¢ Pause every 2-3 completed tasks or at 2.5-hour session mark")
    print("   ‚Ä¢ All pauses must pass quality gates (unless emergency)")
    print("   ‚Ä¢ Use TodoWrite tool to track progress within sessions")
    print()

    print("‚ú® AFS FastAPI Agricultural Robotics Platform Ready")
    print("üåæ ToDoWrite 12-Layer System: Fully Initialized with Strategic Context")
    print("üö® CRITICAL: Follow pause structure compliance - see PAUSE_STRUCTURE_SPECIFICATION.md")
    print("üìö New User Guide: See ToDoWrite-HOWTO.md for complete usage instructions")


if __name__ == "__main__":
    main()