#!/bin/bash

# loadsession - AFS FastAPI Session Context Loader
# Loads and applies SESSION_SUMMARY.md for complete project context restoration

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ AFS FastAPI Session Context Loader${NC}"
echo -e "${BLUE}=====================================${NC}"
echo

# Determine project root relative to this script for robust pathing
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Resolve SESSION_SUMMARY.md location with fallback
SESSION_FILE="${PROJECT_ROOT}/SESSION_SUMMARY.md"
if [ ! -f "${SESSION_FILE}" ]; then
    ALT_SESSION_FILE="${PROJECT_ROOT}/docs/monitoring/SESSION_SUMMARY.md"
    if [ -f "${ALT_SESSION_FILE}" ]; then
        SESSION_FILE="${ALT_SESSION_FILE}"
        echo -e "${YELLOW}‚ö†Ô∏è  SESSION_SUMMARY.md not found at project root; using fallback${NC}"
        echo "   Fallback location: ${SESSION_FILE}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  SESSION_SUMMARY.md not found${NC}"
        echo "   Checked locations:"
        echo "     - ${PROJECT_ROOT}/SESSION_SUMMARY.md"
        echo "     - ${PROJECT_ROOT}/docs/monitoring/SESSION_SUMMARY.md"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ SESSION_SUMMARY.md found${NC}"

# Display session summary info
echo -e "${BLUE}üìã Loading Project Context...${NC}"
echo

# Extract key information from SESSION_SUMMARY.md
echo -e "${GREEN}üìä Current Platform Status:${NC}"
if grep -q "v0.1.3" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Version: v0.1.3 (Stable Release)"
fi

if grep -q "129 tests" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Testing: 129 comprehensive tests"
fi

if grep -q "Zero linting warnings" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Quality: Zero linting warnings maintained"
fi

if grep -q "Test-First Development" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Methodology: Test-First Development operational"
fi

echo

echo -e "${GREEN}üéØ Strategic Priority:${NC}"
if grep -q "synchronization infrastructure" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Focus: Synchronization infrastructure development"
fi

if grep -q "distributed systems" "${SESSION_FILE}"; then
    echo "   ‚Ä¢ Foundation: Distributed systems (Vector Clock implemented)"
fi

echo

echo -e "${GREEN}üìö Key Documentation Framework:${NC}"
echo "   ‚Ä¢ WORKFLOW.md: Authoritative testing reference"
echo "   ‚Ä¢ TDD_WORKFLOW.md: Test-First development methodology"
echo "   ‚Ä¢ SYNCHRONIZATION_INFRASTRUCTURE.md: Technical specification"
echo "   ‚Ä¢ WHERE_WE_ARE.md: Strategic project state assessment"

echo

echo -e "${GREEN}üîß Development Environment:${NC}"
echo "   ‚Ä¢ Branch: develop (ready for next evolution)"
echo "   ‚Ä¢ Standards: Enterprise-grade Python 3.12+"
echo "   ‚Ä¢ Architecture: Dual-purpose educational/functional"

echo

echo -e "${BLUE}üìñ Session Summary Content Loaded${NC}"
echo "   File size: $(wc -l < "${SESSION_FILE}") lines"
echo "   Last modified: $(stat -f "%Sm" -t "%Y-%m-%d %H:%M" "${SESSION_FILE}")"

echo

# üö® CRITICAL INVESTIGATION PATTERN REQUIREMENT
echo -e "\033[1;31müö® CRITICAL: MANDATORY INVESTIGATION PATTERN ACTIVE${NC}"
echo -e "\033[1;31m====================================================${NC}"
echo -e "${YELLOW}ALL responses MUST follow structured investigation pattern:${NC}"
echo -e "   ‚Ä¢ Investigation Steps: Numbered methodology"
echo -e "   ‚Ä¢ Files Examined: File paths with rationale"
echo -e "   ‚Ä¢ Evidence Collected: Factual findings with indicators"
echo -e "   ‚Ä¢ Final Analysis: Root cause and solutions"
echo -e "${YELLOW}Reference: .claude/INVESTIGATION_PATTERN_MANDATORY.md${NC}"
echo

# üö® CRITICAL TDD ENFORCEMENT REMINDER
echo -e "\033[1;31müö® CRITICAL: MANDATORY TDD ENFORCEMENT ACTIVE${NC}"
echo -e "\033[1;31m================================================${NC}"
echo -e "${YELLOW}Claude Code MUST follow Test-Driven Development methodology:${NC}"
echo -e "   ‚Ä¢ RED Phase: Write failing tests FIRST"
echo -e "   ‚Ä¢ GREEN Phase: Generate minimal code to pass tests"
echo -e "   ‚Ä¢ REFACTOR Phase: Enhance quality while maintaining coverage"
echo -e "${YELLOW}Automated pre-commit hooks validate TDD compliance.${NC}"
echo -e "${YELLOW}Reference: .claude/TDD_MANDATORY_REMINDER.md${NC}"
echo

echo -e "${GREEN}üéâ Session Context Successfully Restored!${NC}"
echo
echo -e "${BLUE}Ready for sophisticated agricultural robotics development.${NC}"
echo -e "${BLUE}Platform positioned for advanced synchronization infrastructure.${NC}"
echo

# Show current git status for context
echo -e "${YELLOW}üìã Current Git Status:${NC}"
git status --porcelain | head -5 || echo "   Clean working directory"

echo
echo -e "${GREEN}‚ú® AFS FastAPI v0.1.3 Enterprise Platform Ready${NC}"
