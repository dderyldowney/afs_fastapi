#!/usr/bin/env python3
# type: ignore

import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.todos.manager import get_active_items  # noqa: E402


def display_phase_status():
    active_items = get_active_items()
    active_phase = active_items["phase"]

    if not active_phase:
        print("=== AFS FastAPI Development Phase Status ===")
        print()
        print("No active development phase found.")
        print(
            'Use "./bin/phase-start" to start a new phase or "./bin/phase-activate <ID>" to activate an existing one.'
        )
        return

    print("=== AFS FastAPI Development Phase Status ===")
    print()

    phase_name = active_phase.get("title", "Unknown Phase")
    phase_status = active_phase.get("status", "unknown")
    status_icon = {
        "planned": "⚪",
        "in_progress": "🚀",
        "blocked": "🚫",
        "done": "✅",
        "rejected": "❌",
    }.get(phase_status, "❓")
    print(f"{status_icon} Current Phase: {phase_name} ({phase_status})")

    if active_items["goal"]:
        print(f"   Strategic Alignment: {active_items["goal"]["title"]}")
    print()

    steps = active_phase.get("steps", [])
    total_steps = len(steps)
    if total_steps > 0:
        completed_steps = len([s for s in steps if s["status"] == "done"])
        pending_steps = len([s for s in steps if s["status"] == "planned"])
        in_progress_steps = len([s for s in steps if s["status"] == "in_progress"])
        progress_percentage = (completed_steps / total_steps * 100) if total_steps > 0 else 0

        print("📊 Phase Progress")
        print(f"   Total Steps: {total_steps}")
        print(f"   Completed: {completed_steps} ({progress_percentage:.1f}%)")
        print(f"   In Progress: {in_progress_steps}")
        print(f"   Pending: {pending_steps}")
        print()

        bar_width = 40
        completed_bars = int(progress_percentage / 100 * bar_width)
        pending_bars = bar_width - completed_bars
        progress_bar = "█" * completed_bars + "░" * pending_bars
        print(f"   Progress: [{progress_bar}] {progress_percentage:.1f}%")
        print()

        print("📋 Phase Steps")
        for i, step in enumerate(steps, 1):
            status_icon = {
                "planned": "○",
                "in_progress": "◐",
                "done": "●",
                "blocked": "🚫",
                "rejected": "❌",
            }.get(step["status"], "?")
            print(f"{i:2d}. {status_icon} {step['title']}")
        print()

    else:
        print("No phase steps found.")
        print('Use "./bin/phase-add" to add implementation steps.')

    print("Commands:")
    print('  ./bin/phase-add "Step Description"     - Add implementation step')
    print('  ./bin/phase-complete "Step"            - Mark step as completed')
    print("  ./bin/phase-end                          - Complete and archive phase")


if __name__ == "__main__":
    display_phase_status()
