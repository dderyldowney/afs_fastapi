#!/usr/bin/env python3
# type: ignore

import argparse
import sys
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description="Display all available ToDoWrite 12-layer system commands.")
    parser.add_argument("--layer", type=str, help="Show commands for a specific layer.")
    parser.add_argument("--operation", type=str, choices=["add", "status", "complete", "delete"], help="Show commands for a specific operation.")
    args = parser.parse_args()

    bin_dir = Path(__file__).parent
    
    # Define the 12-layer structure
    layers = [
        {"name": "Goal", "commands": ["goal-add", "goal-status", "goal-complete", "goal-delete"], "icon": "🎯"},
        {"name": "Concept", "commands": ["concept-add", "concept-status"], "icon": "💡"},
        {"name": "Context", "commands": ["context-status"], "icon": "🌍"},
        {"name": "Constraints", "commands": ["constraint-status"], "icon": "⚠️"},
        {"name": "Requirements", "commands": ["requirement-status"], "icon": "📋"},
        {"name": "Acceptance Criteria", "commands": ["acceptance-status"], "icon": "✅"},
        {"name": "Interface Contract", "commands": ["interface-status"], "icon": "🔌"},
        {"name": "Phase", "commands": ["phase-add", "phase-status", "phase-complete", "phase-delete"], "icon": "📅"},
        {"name": "Step", "commands": ["step-add", "step-status", "step-complete", "step-activate"], "icon": "👣"},
        {"name": "Task", "commands": ["task-add", "task-status", "task-complete", "task-delete", "task-activate", "task-pause", "task-resume", "task-reorder"], "icon": "📝"},
        {"name": "SubTask", "commands": ["subtask-add", "subtask-status", "subtask-complete"], "icon": "🔧"},
        {"name": "Command", "commands": ["command-add", "command-status", "command-execute"], "icon": "⚡"},
    ]

    # Strategic commands
    strategic_commands = [
        "strategic-add", "strategic-status", "strategic-complete", "strategic-delete",
        "strategic-list", "strategic-pause", "strategic-resume", "strategic-reorder"
    ]

    # System commands
    system_commands = [
        "todo-status", "todo-sync", "loadsession", "savesession", "whereweare"
    ]

    if args.layer:
        # Show commands for specific layer
        layer_found = False
        for layer in layers:
            if layer["name"].lower() == args.layer.lower():
                layer_found = True
                print(f"{layer['icon']} {layer['name']} Layer Commands")
                print("=" * 50)
                for cmd in layer["commands"]:
                    cmd_path = bin_dir / cmd
                    status = "✓" if cmd_path.exists() else "✗"
                    print(f"{status} ./bin/{cmd}")
                break
        
        if not layer_found:
            print(f"Error: Layer '{args.layer}' not found.")
            print("Available layers: " + ", ".join([l["name"] for l in layers]))
            sys.exit(1)
        return

    if args.operation:
        # Show commands for specific operation
        print(f"🔧 All '{args.operation.upper()}' Commands")
        print("=" * 50)
        for layer in layers:
            matching_commands = [cmd for cmd in layer["commands"] if args.operation in cmd]
            if matching_commands:
                print(f"{layer['icon']} {layer['name']}:")
                for cmd in matching_commands:
                    cmd_path = bin_dir / cmd
                    status = "✓" if cmd_path.exists() else "✗"
                    print(f"  {status} ./bin/{cmd}")
        return

    # Show all commands organized by layer
    print("🏗️  ToDoWrite 12-Layer System Commands")
    print("=" * 60)
    print()

    print("📊 STRATEGIC PLANNING LAYERS (1-7)")
    print("-" * 40)
    for layer in layers[:7]:
        print(f"{layer['icon']} Layer {layers.index(layer) + 1}: {layer['name']}")
        for cmd in layer["commands"]:
            cmd_path = bin_dir / cmd
            status = "✓" if cmd_path.exists() else "✗"
            print(f"  {status} ./bin/{cmd}")
        print()

    print("🚀 IMPLEMENTATION LAYERS (8-11)")
    print("-" * 40)
    for layer in layers[7:11]:
        print(f"{layer['icon']} Layer {layers.index(layer) + 1}: {layer['name']}")
        for cmd in layer["commands"]:
            cmd_path = bin_dir / cmd
            status = "✓" if cmd_path.exists() else "✗"
            print(f"  {status} ./bin/{cmd}")
        print()

    print("⚡ EXECUTION LAYER (12)")
    print("-" * 40)
    layer = layers[11]
    print(f"{layer['icon']} Layer 12: {layer['name']}")
    for cmd in layer["commands"]:
        cmd_path = bin_dir / cmd
        status = "✓" if cmd_path.exists() else "✗"
        print(f"  {status} ./bin/{cmd}")
    print()

    print("🎯 STRATEGIC MANAGEMENT")
    print("-" * 40)
    for cmd in strategic_commands:
        cmd_path = bin_dir / cmd
        status = "✓" if cmd_path.exists() else "✗"
        print(f"  {status} ./bin/{cmd}")
    print()

    print("🔧 SYSTEM MANAGEMENT")
    print("-" * 40)
    for cmd in system_commands:
        cmd_path = bin_dir / cmd
        status = "✓" if cmd_path.exists() else "✗"
        print(f"  {status} ./bin/{cmd}")
    print()

    # Summary statistics
    total_commands = sum(len(layer["commands"]) for layer in layers) + len(strategic_commands) + len(system_commands)
    existing_commands = sum(1 for layer in layers for cmd in layer["commands"] if (bin_dir / cmd).exists())
    existing_strategic = sum(1 for cmd in strategic_commands if (bin_dir / cmd).exists())
    existing_system = sum(1 for cmd in system_commands if (bin_dir / cmd).exists())
    total_existing = existing_commands + existing_strategic + existing_system

    print("📈 SUMMARY")
    print("-" * 40)
    print(f"Total Commands Defined: {total_commands}")
    print(f"Commands Implemented: {total_existing}")
    print(f"Implementation Rate: {total_existing/total_commands*100:.1f}%")
    print()
    print("Use --layer <name> to see commands for a specific layer")
    print("Use --operation <add|status|complete|delete> to see commands by operation")


if __name__ == "__main__":
    main()
