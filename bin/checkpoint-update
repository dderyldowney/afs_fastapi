#!/usr/bin/env python3
"""
Checkpoint Update Tool for AFS FastAPI Agricultural Robotics Platform.

Updates checkpoint status to any valid value with comprehensive validation.
Provides dedicated checkpoint management following agricultural development patterns.
"""

from __future__ import annotations

import argparse
import sys
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Add bin directory to sys.path for common modules
bin_path = project_root / "bin"
if bin_path.exists():
    sys.path.insert(0, str(bin_path))

from common.json_operations import load_json, save_json


def update_checkpoint_status(checkpoint_id: str, new_status: str) -> bool:
    """Update a checkpoint status with validation."""
    valid_statuses = ["pending", "in_progress", "completed", "failed", "cancelled", "on_hold"]

    if new_status not in valid_statuses:
        print(f"❌ Invalid status: {new_status}")
        print(f"Valid statuses: {', '.join(valid_statuses)}")
        return False

    checkpoints_file = project_root / ".claude" / "checkpoints.json"
    checkpoints = load_json(checkpoints_file, default=[])

    for checkpoint in checkpoints:
        if checkpoint["id"] == checkpoint_id:
            old_status = checkpoint.get("status", "no status")
            checkpoint["status"] = new_status

            if save_json(checkpoints_file, checkpoints):
                status_icons = {
                    "completed": "✅", "in_progress": "🔄", "pending": "⏳",
                    "failed": "❌", "cancelled": "🚫", "on_hold": "⏸️"
                }
                icon = status_icons.get(new_status, "📝")
                print(f"✅ Updated checkpoint {checkpoint_id}")
                print(f"   Status: {old_status} → {new_status} {icon}")
                print(f"   Description: {checkpoint['description']}")
                print(f"   Git Hash: {checkpoint['git_hash'][:8]}...")
                return True
            else:
                print(f"❌ Failed to save checkpoints file")
                return False

    print(f"❌ Checkpoint '{checkpoint_id}' not found")
    return False


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Update checkpoint status in the AFS FastAPI agricultural robotics system.",
        epilog="Valid statuses: pending, in_progress, completed, failed, cancelled, on_hold"
    )
    parser.add_argument("checkpoint_id", type=str, help="The ID of the checkpoint to update.")
    parser.add_argument("status", type=str, help="The new status to set.")
    args = parser.parse_args()

    success = update_checkpoint_status(args.checkpoint_id, args.status)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()