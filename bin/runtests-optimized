#!/usr/bin/env python3
"""
Performance-optimized pytest runner for AFS FastAPI agricultural robotics platform.

Automatically detects optimal number of workers and runs tests in parallel
with agricultural-specific optimizations.
"""

import subprocess
import sys
from pathlib import Path

def get_optimal_workers():
    """Determine optimal number of workers based on CPU cores."""
    import os
    cpu_count = os.cpu_count() or 4
    # Use 75% of CPU cores to leave resources for other processes
    optimal_workers = max(1, int(cpu_count * 0.75))
    return optimal_workers

def run_optimized_tests():
    """Run tests with optimal parallelization."""
    print("üåæ AFS FastAPI Performance-Optimized Test Runner")
    print("=" * 50)

    # Get optimal worker count
    workers = get_optimal_workers()
    print(f"üöÄ Using {workers} parallel workers (auto-detected)")

    # Build pytest command with optimizations
    cmd = [
        "python", "-m", "pytest",
        f"-n{workers}",           # Parallel workers
        "--tb=short",            # Short tracebacks
        "-x",                    # Stop on first failure
        "--strict-markers",     # Markers must be defined
        "--strict-config",      # Config must be explicitly defined
        "-v",                    # Verbose output
        "--asyncio-mode=auto",  # Auto-detect async mode
        "tests/",               # Test directory
    ]

    print(f"üìù Command: {' '.join(cmd)}")
    print("‚è±Ô∏è  Starting optimized test run...")

    try:
        result = subprocess.run(cmd, timeout=300)  # 5 minute timeout
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print("‚è∞ Test run timed out after 5 minutes")
        return False
    except Exception as e:
        print(f"‚ùå Error running tests: {e}")
        return False

if __name__ == "__main__":
    success = run_optimized_tests()
    sys.exit(0 if success else 1)