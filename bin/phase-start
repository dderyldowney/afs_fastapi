#!/bin/bash

# phase-start: Start new development phase with strategic alignment
# Usage: ./bin/phase-start "Phase Name and Description"

set -euo pipefail

# Ensure we're in the project root
if [[ ! -f ".claude/DUAL_TODO_SYSTEM.md" ]]; then
    echo "Error: Must be run from AFS FastAPI project root directory"
    exit 1
fi

# Check if description provided
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 \"Phase Name and Description\""
    echo ""
    echo "Examples:"
    echo "  $0 \"Phase 7: Advanced Fleet Coordination\""
    echo "  $0 \"Phase 8: Precision Agriculture VRA System\""
    echo "  $0 \"Cloud Integration Enhancement Phase\""
    echo ""
    echo "Phase should align with strategic objectives from './bin/strategic-list'"
    exit 1
fi

PHASE_NAME="$1"
PHASE_FILE=".claude/phase_todos.json"
STRATEGIC_FILE=".claude/strategic_todos.json"

# Check if there's already an active phase
if [[ -f "$PHASE_FILE" ]]; then
    CURRENT_PHASE=$(python3 -c "
import json
try:
    with open('$PHASE_FILE', 'r') as f:
        data = json.load(f)
    current = data.get('current_phase', {})
    if current.get('status') == 'active':
        print(f'Error: Phase already active: {current.get('name', 'Unknown Phase')}')
        print('Use './bin/phase-end' to complete the current phase before starting a new one.')
        print('Use './bin/phase-status' to check current phase progress.')
        sys.exit(1)
    elif current.get('status') == 'paused':
        print(f'Error: Phase already paused: {current.get('name', 'Unknown Phase')}')
        print('Use './bin/phase-resume' to continue this phase.')
        print('Use './bin/phase-end' to complete and archive the paused phase if no longer needed.')
        sys.exit(1)
    else:
        print('')
except:
    print('')
")

    if [[ -n "$CURRENT_PHASE" ]]; then
        echo "Error: Phase already active: $CURRENT_PHASE"
        echo "Use './bin/phase-end' to complete the current phase before starting a new one."
        echo "Use './bin/phase-status' to check current phase progress."
        exit 1
    fi
fi

# Get current timestamp in ISO format
ISO_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)

# Show available strategic TODOs for alignment
echo "=== Starting New Development Phase ==="
echo "Phase: $PHASE_NAME"
echo ""

if [[ -f "$STRATEGIC_FILE" ]]; then
    echo "Available Strategic Objectives (for alignment):"
    python3 -c "
import json
try:
    with open('$STRATEGIC_FILE', 'r') as f:
        data = json.load(f)
    todos = data.get('todos', [])
    pending_strategic = [t for t in todos if t['status'] == 'pending']

    if pending_strategic:
        for i, todo in enumerate(pending_strategic[:5], 1):
            priority_marker = {'high': '[HIGH]', 'medium': '[MED]', 'low': '[LOW]'}.get(todo['priority'], '[???]')
            print(f'  {i}. {priority_marker} {todo[\"content\"]} (ID: {todo[\"id\"]})')
    else:
        print('  No pending strategic objectives found.')
except:
    print('  Could not load strategic objectives.')
"
    echo ""
fi

# Prompt for strategic alignment (optional)
echo "Enter strategic TODO ID for alignment (optional, press Enter to skip):"
read -r STRATEGIC_ID

# Create phase todos file with new phase
python3 -c "
import json
import sys
from datetime import datetime

# Validate strategic ID if provided
strategic_todo = None
if '$STRATEGIC_ID'.strip():
    try:
        with open('$STRATEGIC_FILE', 'r') as f:
            strategic_data = json.load(f)
        strategic_todos = strategic_data.get('todos', [])
        strategic_todo = next((t for t in strategic_todos if t['id'] == '$STRATEGIC_ID'), None)
        if not strategic_todo:
            print(f'Warning: Strategic TODO ID \"$STRATEGIC_ID\" not found. Proceeding without alignment.')
        elif strategic_todo['status'] != 'pending':
            print(f'Warning: Strategic TODO \"$STRATEGIC_ID\" is not pending (status: {strategic_todo[\"status\"]})')
    except:
        print('Warning: Could not validate strategic TODO ID. Proceeding without alignment.')

# Create new phase structure
phase_data = {
    'current_phase': {
        'name': '$PHASE_NAME',
        'description': 'Agricultural robotics development phase following TDD methodology',
        'started_at': '$ISO_TIMESTAMP',
        'strategic_todo_id': '$STRATEGIC_ID' if '$STRATEGIC_ID'.strip() and strategic_todo else None,
        'status': 'active'
    },
    'todos': [],
    'metadata': {
        'last_updated': '$ISO_TIMESTAMP',
        'version': '1.0.0',
        'total_phase_todos': 0,
        'completed_count': 0,
        'in_progress_count': 0,
        'pending_count': 0
    }
}

# Write phase file
with open('$PHASE_FILE', 'w') as f:
    json.dump(phase_data, f, indent=2)

print('✓ New development phase started!')
print(f'  Phase: $PHASE_NAME')
print(f'  Started at: $ISO_TIMESTAMP')
if strategic_todo:
    print(f'  Aligned with: {strategic_todo[\"content\"]}')
print()
print('Next steps:')
print('1. Use \"./bin/phase-add\" to add phase implementation steps')
print('2. Follow TDD methodology: Investigation → RED → GREEN → REFACTOR')
print('3. Use \"./bin/phase-status\" to track progress')
print('4. Use \"./bin/phase-end\" when phase is complete')
"
# Auto-sync TODO state for session persistence
./bin/todo-sync --silent 2>/dev/null || true
