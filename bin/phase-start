#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path

# Add project root to sys.path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from afs_fastapi.core.todos_manager import get_strategic_goals, start_phase  # noqa: E402


def main():
    parser = argparse.ArgumentParser(description="Start a new development phase.")
    parser.add_argument("name", type=str, help="The name of the new phase.")
    parser.add_argument("--strategic-id", type=str, help="The ID of the strategic goal to align with.")
    args = parser.parse_args()

    strategic_id = args.strategic_id
    if not strategic_id:
        print("=== Starting New Development Phase ===")
        print(f"Phase: {args.name}")
        print()

        goals = get_strategic_goals()
        pending_goals = [g for g in goals if g['status'] == 'pending']

        if pending_goals:
            print("Available Strategic Objectives (for alignment):")
            for i, goal in enumerate(pending_goals, 1):
                print(f"  {i}. {goal['description']} (ID: {goal['id']})")
            print()
            strategic_id = input("Enter strategic goal ID for alignment (optional, press Enter to skip): ")
        else:
            print("No pending strategic objectives found.")
    
    if not strategic_id:
        print("Error: Strategic goal ID is required to start a new phase.")
        sys.exit(1)

    new_phase, error = start_phase(args.name, strategic_id)

    if error:
        print(f"Error: {error}")
        sys.exit(1)
    
    if new_phase:
        print("✓ New development phase started!")
        print(f"  Phase: {new_phase['name']}")
        print(f"  ID: {new_phase['id']}")
        print(f"  Started at: {new_phase['date_started']}")
        
        goals = get_strategic_goals()
        for goal in goals:
            if goal['id'] == strategic_id:
                print(f"  Aligned with: {goal['description']}")
                break
        
        print()
        print("Next steps:")
        print('1. Use "./bin/phase-add" to add phase implementation steps')
        print("2. Follow TDD methodology: Investigation → RED → GREEN → REFACTOR")
        print('3. Use "./bin/phase-status" to track progress')
        print('4. Use "./bin/phase-end" when phase is complete')

if __name__ == "__main__":
    main()

# Auto-sync TODO state for session persistence
./bin/todo-sync --silent 2>/dev/null || true
