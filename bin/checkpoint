#!/usr/bin/env python3
"""
Quick checkpoint tool for agricultural robotics development.

Creates atomic savepoints with git commit and session documentation.
Designed for long-running phase work with frequent context switching.
"""

from __future__ import annotations

import sys
from datetime import datetime
from pathlib import Path

project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from bin.common.json_operations import load_json, save_json


def create_checkpoint(description: str) -> None:
    """Create a checkpoint with git commit and session save.

    Parameters
    ----------
    description : str
        Description of what was accomplished at this checkpoint
    """
    timestamp = datetime.now().isoformat()

    print(f"🔄 Creating checkpoint: {description}")
    print(f"⏰ Timestamp: {timestamp}")

    # 1. Stage all changes
    import subprocess
    try:
        result = subprocess.run(
            ["git", "add", "-A"],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        if result.returncode != 0:
            print(f"❌ Git add failed: {result.stderr}")
            return
        print("✅ Staged all changes")

        # 2. Create commit
        commit_msg = f"checkpoint: {description}\n\nAutomatic checkpoint created at {timestamp}"
        result = subprocess.run(
            ["git", "commit", "-m", commit_msg],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        if result.returncode != 0:
            print(f"❌ Git commit failed: {result.stderr}")
            return
        print("✅ Created git commit")

        # 3. Save checkpoint metadata
        checkpoints_file = project_root / ".claude" / "checkpoints.json"
        checkpoints_file.parent.mkdir(exist_ok=True)

        checkpoints = load_json(checkpoints_file, default=[])

        # Get current git hash
        result = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        git_hash = result.stdout.strip() if result.returncode == 0 else "unknown"

        checkpoint_data = {
            "id": f"checkpoint_{len(checkpoints) + 1}",
            "description": description,
            "timestamp": timestamp,
            "git_hash": git_hash,
            "type": "checkpoint"
        }

        checkpoints.append(checkpoint_data)
        save_json(checkpoints_file, checkpoints)
        print("✅ Saved checkpoint metadata")

        # 4. Update session summary
        session_file = project_root / "SESSION_SUMMARY.md"
        if session_file.exists():
            with open(session_file, "a") as f:
                f.write(f"\n## Checkpoint: {description}\n")
                f.write(f"**Time:** {timestamp}\n")
                f.write(f"**Git Hash:** {git_hash}\n")
                f.write(f"**Status:** Work saved and committed\n\n")
            print("✅ Updated session summary")

        print(f"🎯 Checkpoint '{checkpoint_data['id']}' created successfully")
        print(f"📍 Resume with: ./bin/resume-from {checkpoint_data['id']}")

    except Exception as e:
        print(f"❌ Checkpoint creation failed: {e}")


def main() -> None:
    """Main checkpoint creation function."""
    if len(sys.argv) != 2:
        print("Usage: ./bin/checkpoint \"Description of work completed\"")
        print("\nExample:")
        print("  ./bin/checkpoint \"Completed message prioritization framework\"")
        sys.exit(1)

    description = sys.argv[1]
    create_checkpoint(description)


if __name__ == "__main__":
    main()